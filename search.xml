<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>表格固定表头和固定列</title>
      <link href="/blog/2019/01/12/%E8%A1%A8%E6%A0%BC%E5%9B%BA%E5%AE%9A%E8%A1%A8%E5%A4%B4%E5%92%8C%E5%9B%BA%E5%AE%9A%E5%88%97/"/>
      <url>/blog/2019/01/12/%E8%A1%A8%E6%A0%BC%E5%9B%BA%E5%AE%9A%E8%A1%A8%E5%A4%B4%E5%92%8C%E5%9B%BA%E5%AE%9A%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>平时业务中经常会碰到固定表头或者固定列的需求，对于只固定表头或者固定列的情况可以使用两个表格，利用css实现。但是对于需要同时固定表头和列的情况，就需要四个表格完成样式，js监听滚动事件。如果表格数据比较多，样式复杂，性能就会受影响，效果不是很理想。那么，我们还有其他方式实现同时固定表头和列吗？</p><p>答案是，yes</p><p>接下来给大家介绍下 position: sticky; 这个属性</p><h2 id="position属性"><a href="#position属性" class="headerlink" title="position属性"></a>position属性</h2><p>CSS position属性用于指定一个元素在文档中的定位方式。top，right，bottom 和 left 属性则决定了该元素的最终位置。<br>position 常用值有：</p><ul><li>absolute（生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。）</li><li>relative（生成相对定位的元素，相对于其正常位置进行定位。）</li><li>fixed（生成固定定位的元素，相对于浏览器窗口进行定位。）</li><li>sticky（生成粘性定位元素）</li></ul><p>下面我们主要介绍的是粘性定位</p><h2 id="粘性定位"><a href="#粘性定位" class="headerlink" title="粘性定位"></a>粘性定位</h2><p>属性为 position: sticky 的元素是粘性定位元素。</p><p>粘性定位可以被认为是相对定位和固定定位的混合。元素在跨越特定阈值前为相对定位，之后为固定定位。举个栗子：</p><p>git效果图：</p><p><img src="https://yanxuan.nosdn.127.net/256ba3567699a9e07d40209c60e7a25c.gif" alt=""></p><p>dt元素在到达顶部之前为相对定位，当元素的top为0之后，就固定在顶部。</p><p><a href="https://codepen.io/wangcherry/pen/rooJEV" target="_blank" rel="noopener">查看源码</a></p><h2 id="position-sticky-实现表格固定表头和列"><a href="#position-sticky-实现表格固定表头和列" class="headerlink" title="position: sticky; 实现表格固定表头和列"></a>position: sticky; 实现表格固定表头和列</h2><p>一个表格轻松搞定表头和列固定</p><p>gif效果图：</p><p><img src="https://yanxuan.nosdn.127.net/d465f0aef61d5b609e7544cef5855f2c.gif" alt=""></p><p><a href="https://codepen.io/wangcherry/pen/PXXRqd" target="_blank" rel="noopener">查看源码</a></p><p>需要注意：</p><ul><li>该粘性定位元素并不脱离文档流，仍然保留元素原本在文档流中的位置。</li><li>当元素在容器中被滚动超过指定的偏移值时，元素在容器内固定在指定位置。亦即如果你设置了top: 50px，那么在sticky元素到达距离相对定位的元素顶部50px的位置时固定，不再向上移动。</li><li>元素固定的相对偏移是相对于离它最近的具有滚动框的祖先元素，如果祖先元素都不可以滚动，那么是相对于viewport来计算元素的偏移量</li><li>须指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。并且 top 和 bottom 同时设置时，top 生效的优先级高，left 和 right 同时设置时，left 的优先级高。</li></ul><p>兼容性：</p><ul><li>这个属性的兼容性还不是很好，目前仍是一个试验性的属性，并不是W3C推荐的标准。<br><img src="https://yanxuan.nosdn.127.net/e68f0b5f9ed7b0932320e516d4b8d9c9.png" alt=""></li></ul><h2 id="传统方式实现表格固定表头和列"><a href="#传统方式实现表格固定表头和列" class="headerlink" title="传统方式实现表格固定表头和列"></a>传统方式实现表格固定表头和列</h2><p>对兼容性要求高时可以考虑用js监听滚动实现固定</p><p>gif效果图：</p><p><img src="https://yanxuan.nosdn.127.net/83e278cbe3a7df608d7795869b941499.gif" alt=""></p><p><a href="https://codepen.io/wangcherry/pen/PXXRZd" target="_blank" rel="noopener">查看源码</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>文件下载和页面打印</title>
      <link href="/blog/2018/12/27/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%92%8C%E9%A1%B5%E9%9D%A2%E6%89%93%E5%8D%B0/"/>
      <url>/blog/2018/12/27/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%92%8C%E9%A1%B5%E9%9D%A2%E6%89%93%E5%8D%B0/</url>
      
        <content type="html"><![CDATA[<p>文件下载和页面打印在业务中有很多使用场景，它们的本质是一样的，都是向后端请求一个文件，然后下载或者打印。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul><li>使用 a 标签<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/i/w3school_logo_white.gif"</span> <span class="attr">download</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="关于-download-重命名"><a href="#关于-download-重命名" class="headerlink" title="关于 download 重命名"></a>关于 download 重命名</h4><ul><li>download 的值可作为文件的名称</li><li>后端如果对文件命名，那么会使用后端的命名</li><li>在后端没有命名时，以 download 的值为文件名称</li><li>都没命名时，或者 download 值设置为空时，下载的文件用文件本身的名称</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>rx和promise一个小例子</title>
      <link href="/blog/2018/12/07/rx%E5%92%8Cpromise%E4%B8%80%E4%B8%AA%E5%B0%8F%E4%BE%8B%E5%AD%90/"/>
      <url>/blog/2018/12/07/rx%E5%92%8Cpromise%E4%B8%80%E4%B8%AA%E5%B0%8F%E4%BE%8B%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1 id="rx和promise一个小例子"><a href="#rx和promise一个小例子" class="headerlink" title="rx和promise一个小例子"></a>rx和promise一个小例子</h1><ul><li>系统中多处需要用到的接口</li><li>例如用户信息、店铺列表</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rx </tag>
            
            <tag> promise </tag>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
