<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>nodejs实现http和https代理服务</title>
      <link href="/blog/2019/04/30/nodejs%E5%AE%9E%E7%8E%B0http%E5%92%8Chttps%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/"/>
      <url>/blog/2019/04/30/nodejs%E5%AE%9E%E7%8E%B0http%E5%92%8Chttps%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="http-https协议"><a href="#http-https协议" class="headerlink" title="http/https协议"></a>http/https协议</h2><p>HTTP(Hypertext Transfer Protocol，超文本传输协议) 在OSI七层模型属于应用层协议，在网络与传输层使用可靠的数据传输协议TCP/IP，HTTP协议采用明文传输信息的方式。</p><p>HTTPS (Secure Hypertext Transfer Protocol，安全超文本传输协议）是一个安全通信通道，基于HTTP开发，用于在客户端和服务器之间交换信息时采用安全套接字层(SSL)进行信息交换。通俗地讲，HTTPS是HTTP的安全版，即使用了TLS/SSL加密的HTTP协议。</p><p><img src="http://mailshark.nos-jd.163yun.com/document/static/8F1DCA29F7FB5FE337DDFA83B6471964.jpg" alt=""></p><p>从上图可以知道HTTPS的分层是在传输层之上建立了安全层，所有的HTTP请求都在安全层上传输。所以对于http代理，我们只需要拦截请求，就可获取到信息，但是对于https代理，我还需要做一些处理才能拿到请求明文信息。更多SSL/TLS协议知识可以参考<a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html" target="_blank" rel="noopener">SSL/TLS协议运行机制的概述</a></p><h2 id="http-https代理原理"><a href="#http-https代理原理" class="headerlink" title="http/https代理原理"></a>http/https代理原理</h2><h3 id="“中间人”代理"><a href="#“中间人”代理" class="headerlink" title="“中间人”代理"></a>“中间人”代理</h3><p>MITM（中间人）代理的技术在实际开发和测试中经常会使用。调试接口、查看HTTP请求与响应时使用的http抓包调试工具如：Fiddler、 Charles，就是基于该原理实现的。用户通过设置代理，网络请求就会通过中间人代理，再发往正式服务器。</p><p>所以我们的实现原理就是<strong>建立一个可以同时与客户端和服务端进行通信的网络服务</strong>。</p><p>中间人代理有两种实现方式，一种如下示意图：</p><p><img src="http://mailshark.nos-jd.163yun.com/document/static/5B345D71EFA7AF8C3DDA5B4FE5434BD7.webp" alt=""></p><p>那么http代理的实现方案就是：</p><p><img src="http://mailshark.nos-jd.163yun.com/document/static/2B7C00F90320601594FCD623CF6A4B8C.jpg" alt=""></p><p>此时的代理就是“中间人”，代理拦截到请求之后可以修改请求数据，再向服务器发起请求，获取到数据后也可以修改数据，再返回给客户端。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">cReq, cRes</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> u = url.parse(cReq.url);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> options = &#123;</span><br><span class="line">        hostname : u.hostname, </span><br><span class="line">        port     : u.port || <span class="number">80</span>,</span><br><span class="line">        path     : u.path,</span><br><span class="line">        method     : cReq.method,</span><br><span class="line">        headers     : cReq.headers</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> pReq = http.request(options, <span class="function"><span class="keyword">function</span>(<span class="params">pRes</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// console.log(options);</span></span><br><span class="line">        cRes.writeHead(pRes.statusCode, pRes.headers);</span><br><span class="line">        pRes.pipe(cRes);</span><br><span class="line">    &#125;).on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        cRes.end();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    cReq.pipe(pReq);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(request);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure><p>另外一种实现方式是TCP隧道：</p><p>由于https请求数据在安全层上传输，我们不能像http请求那样直接解析请求报文，但是，我们可以开启一个TCP服务，监听CONNECT请求，因为应用层也是基于传输层的，所以数据在到达应用层之前会首先经过传输层，从而实现传输层数据监听。这种方式就像为客户端和服务器之间打通了一条TCP连接的隧道，作为HTTP代理对隧道里传输的内容一概不予理会，只负责传输。所以隧道代理可以代理所有基于TCP的流量，http数据也是可以监听到，不过会浪费一次TCP连接往返。</p><p>TCP隧道连接如下示意图：</p><p><img src="http://mailshark.nos-jd.163yun.com/document/static/8D7EDB84587FE23E1CB02664AE71A948.webp" alt=""></p><p>那么隧道连接代码实现方案：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params">cReq, cSock</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> u = url.parse(<span class="string">'http://'</span> + cReq.url);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> pSock = net.connect(u.port, u.hostname, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// console.log(u);</span></span><br><span class="line">        cSock.write(<span class="string">'HTTP/1.1 200 Connection Established\r\n\r\n'</span>);</span><br><span class="line">        pSock.pipe(cSock);</span><br><span class="line">    &#125;).on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        cSock.end();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    cSock.pipe(pSock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'connect'</span>, connect);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure><p>最后，我们还需要支持域名证书验证，才能拿到https的请求明文信息。域名证书 是每个支持HTTPS网站都需要有的一份证书，用于客户端验证该网站的安全性，而该证书通常是通过安全机构申请的，这个机构就是 CA（Certificate Authority，证书颁发机构）。在每台用户计算机的操作系统或浏览器中，都会保存一份CA列表，也就是有多个根证书，不同CA分别包含了不同的域名证书，浏览器在获取到域名证书之后，会向CA根证书进行验证，如果验证通过则能正常收发请求。所以我们需要在代理服务器上伪造证书，实现方案是，node生成根证书，安装并信任，在拦截到https请求时，我们利用根证书动态签发域名证书，并将证书返回给浏览器，浏览器验证证书，由于域名证书是我们信任的根证书签发的，所以会验证通过。于是我们也能解析请求报文了。</p><p>生成根证书：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out private.pem 2048</span><br><span class="line">openssl req -new -x509 -key private.pem -out public.crt -days 99999</span><br></pre></td></tr></table></figure></p><p>安装并信任即可</p><p>伪造证书示意图：</p><p><img src="http://mailshark.nos-jd.163yun.com/document/static/E62F9F910F91BD31926C2DB92DBC6F42.jpg" alt=""></p><p>那么https代理的实现方案就是：</p><p><img src="" alt=""></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">cReq, cRes</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> u = url.parse(cReq.url);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    hostname : u.hostname, </span><br><span class="line">    port     : u.port || <span class="number">80</span>,</span><br><span class="line">    path     : u.path,       </span><br><span class="line">    method   : cReq.method,</span><br><span class="line">    headers  : cReq.headers</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> pReq = http.request(options, <span class="function"><span class="keyword">function</span>(<span class="params">pRes</span>) </span>&#123;</span><br><span class="line">    cRes.writeHead(pRes.statusCode, pRes.headers);</span><br><span class="line">    pRes.pipe(cRes);</span><br><span class="line">  &#125;).on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    cRes.end();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  cReq.pipe(pReq);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params">cReq, cSock</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> u = url.parse(<span class="string">'http://'</span> + cReq.url);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> pSock = net.connect(u.port, u.hostname, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    cSock.write(<span class="string">'HTTP/1.1 200 Connection Established\r\n\r\n'</span>);</span><br><span class="line">    pSock.pipe(cSock);</span><br><span class="line">  &#125;).on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    cSock.end();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  cSock.pipe(pSock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  key  : fs.readFileSync(<span class="string">'./private.pem'</span>),</span><br><span class="line">  cert : fs.readFileSync(<span class="string">'./public.crt'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = https.createServer(options)</span><br><span class="line">server.on(<span class="string">'request'</span>, request)</span><br><span class="line">server.on(<span class="string">'connect'</span>, connect)</span><br><span class="line">server.listen(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>barrel文件引起循环依赖</title>
      <link href="/blog/2019/04/08/barrel%E6%96%87%E4%BB%B6%E5%BC%95%E8%B5%B7%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/"/>
      <url>/blog/2019/04/08/barrel%E6%96%87%E4%BB%B6%E5%BC%95%E8%B5%B7%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/</url>
      
        <content type="html"><![CDATA[<p>在给QDC项目升级时，碰到这样一个报错。server没问题，build时报错</p><p><img src="http://mailshark.nos-jd.163yun.com/document/static/4054E39044072326F310B61AA0D366CA.jpg" alt=""></p><p>没有报具体错误，按照报错翻译应该是“遇到未定义的provider，通常意味着有一个循环依赖，可能是由于使用“barrel” index.ts 文件引起的”。<br>于是我检查项目中的 provider 使用没有问题，检查了各个模块之间的依赖也没有问题，注意到项目中写了很多index.ts文件，咋一看没有什么问题，比较难发现，但是仔细看index的引用发现barrel使用时有些坑需要注意。</p><h3 id="Barrel"><a href="#Barrel" class="headerlink" title="Barrel"></a>Barrel</h3><p>先介绍一下Barrel，barrel是将多个模块的导出汇总到一个模块的一种方法。barrel本身是一个模块文件，可以重新导出其他模块的选定导出。</p><p>例如有三个模块<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// heroes/hero.component.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HeroComponent &#123;&#125;</span><br><span class="line"><span class="comment">// heroes/hero.model.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Hero &#123;&#125;</span><br><span class="line"><span class="comment">// heroes/hero.service.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HeroService &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./hero.model.ts'</span>;   <span class="comment">// re-export all of its exports</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./hero.service.ts'</span>; <span class="comment">// re-export all of its exports</span></span><br><span class="line"><span class="keyword">export</span> &#123; HeroComponent &#125; <span class="keyword">from</span> <span class="string">'./hero.component.ts'</span>; <span class="comment">// re-export the named thing</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// used barrel</span></span><br><span class="line"><span class="keyword">import</span> &#123; Hero, HeroService &#125; <span class="keyword">from</span> <span class="string">'../heroes'</span>; <span class="comment">// index is implied</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// without barrel</span></span><br><span class="line"><span class="keyword">export</span> &#123; Hero &#125; <span class="keyword">from</span> <span class="string">'../heroes/hero.model.ts'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; HeroService &#125; <span class="keyword">from</span> <span class="string">'../heroes/hero.service.ts'</span>;</span><br></pre></td></tr></table></figure></p><h3 id="Barrel的坑"><a href="#Barrel的坑" class="headerlink" title="Barrel的坑"></a>Barrel的坑</h3><p>在导入同一个模块中的文件时使用barrel可以让文件看起来更清爽，但是在使用时需要注意，因为使用不当可能会引起循环依赖。在这个DQC这个项目中，依赖了@datapi/dscomponent这个包，包在本地打包没问题，但是发成npm包被项目引用后，项目打包就报上面的错误。我简化下，还原报错原因。</p><p>目录结构：<br>|—service<br>|—|—a.service.ts<br>|—|—b.service.ts<br>|—|—index.ts<br>|—table<br>|—|—…<br>|—|—table.module.ts</p><p>例如如下使用<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.service.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AService &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./a.service.ts'</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./b.service.ts'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// table.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; AService &#125; <span class="keyword">from</span> <span class="string">'../service'</span>;</span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">    ...</span><br><span class="line">    providers: [AService]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TableModule &#123; &#125;</span><br></pre></td></tr></table></figure></p><p><code>import { AService } from &#39;../service&#39;;</code> 改为 <code>import { AService } from &#39;../service/a.service.ts&#39;;</code> 后问题得到解决</p><h3 id="angular风格指南"><a href="#angular风格指南" class="headerlink" title="angular风格指南"></a>angular风格指南</h3><p>angular团队已经不推荐barrel这种写法，在风格指南已经删除相关写法。</p><p>所以删除项目中的barrel，改为具体文件导入。</p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://stackoverflow.com/questions/37997824/angular-di-error-exception-cant-resolve-all-parameters#comment80108487_37997824" target="_blank" rel="noopener">Angular DI Error - EXCEPTION: Can’t resolve all parameters</a><br><a href="https://github.com/angular/angular-cli/issues/7369" target="_blank" rel="noopener">Barrel and Circular dependency</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>表格固定表头和固定列</title>
      <link href="/blog/2019/01/12/%E8%A1%A8%E6%A0%BC%E5%9B%BA%E5%AE%9A%E8%A1%A8%E5%A4%B4%E5%92%8C%E5%9B%BA%E5%AE%9A%E5%88%97/"/>
      <url>/blog/2019/01/12/%E8%A1%A8%E6%A0%BC%E5%9B%BA%E5%AE%9A%E8%A1%A8%E5%A4%B4%E5%92%8C%E5%9B%BA%E5%AE%9A%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>平时业务中经常会碰到固定表头或者固定列的需求，对于只固定表头或者固定列的情况可以使用两个表格，利用css实现。但是对于需要同时固定表头和列的情况，就需要四个表格完成样式，js监听滚动事件。如果表格数据比较多，样式复杂，性能就会受影响，效果不是很理想。那么，我们还有其他方式实现同时固定表头和列吗？</p><p>答案是，yes</p><p>接下来给大家介绍下 position: sticky; 这个属性</p><h2 id="position属性"><a href="#position属性" class="headerlink" title="position属性"></a>position属性</h2><p>CSS position属性用于指定一个元素在文档中的定位方式。top，right，bottom 和 left 属性则决定了该元素的最终位置。<br>position 常用值有：</p><ul><li>absolute（生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。）</li><li>relative（生成相对定位的元素，相对于其正常位置进行定位。）</li><li>fixed（生成固定定位的元素，相对于浏览器窗口进行定位。）</li><li>sticky（生成粘性定位元素）</li></ul><p>下面我们主要介绍的是粘性定位</p><h2 id="粘性定位"><a href="#粘性定位" class="headerlink" title="粘性定位"></a>粘性定位</h2><p>属性为 position: sticky 的元素是粘性定位元素。</p><p>粘性定位可以被认为是相对定位和固定定位的混合。元素在跨越特定阈值前为相对定位，之后为固定定位。举个栗子：</p><p>git效果图：</p><p><img src="https://yanxuan.nosdn.127.net/256ba3567699a9e07d40209c60e7a25c.gif" alt=""></p><p>dt元素在到达顶部之前为相对定位，当元素的top为0之后，就固定在顶部。</p><p><a href="https://codepen.io/wangcherry/pen/rooJEV" target="_blank" rel="noopener">查看源码</a></p><h2 id="position-sticky-实现表格固定表头和列"><a href="#position-sticky-实现表格固定表头和列" class="headerlink" title="position: sticky; 实现表格固定表头和列"></a>position: sticky; 实现表格固定表头和列</h2><p>一个表格轻松搞定表头和列固定</p><p>gif效果图：</p><p><img src="https://yanxuan.nosdn.127.net/190e03363b77c9c9a8f5c91169b70fa0.gif" alt=""></p><p><a href="https://codepen.io/wangcherry/pen/PXXRqd" target="_blank" rel="noopener">查看源码</a></p><p>需要注意：</p><ul><li>该粘性定位元素并不脱离文档流，仍然保留元素原本在文档流中的位置。</li><li>当元素在容器中被滚动超过指定的偏移值时，元素在容器内固定在指定位置。亦即如果你设置了top: 50px，那么在sticky元素到达距离相对定位的元素顶部50px的位置时固定，不再向上移动。</li><li>元素固定的相对偏移是相对于离它最近的具有滚动框的祖先元素，如果祖先元素都不可以滚动，那么是相对于viewport来计算元素的偏移量</li><li>须指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。并且 top 和 bottom 同时设置时，top 生效的优先级高，left 和 right 同时设置时，left 的优先级高。</li></ul><p>兼容性：</p><ul><li>这个属性的兼容性还不是很好，目前仍是一个试验性的属性，并不是W3C推荐的标准。<a href="https://caniuse.com/#search=position%3Asticky" target="_blank" rel="noopener">查看兼容性</a><br><img src="https://yanxuan.nosdn.127.net/e68f0b5f9ed7b0932320e516d4b8d9c9.png" alt=""></li></ul><h2 id="js实现表格固定表头和列"><a href="#js实现表格固定表头和列" class="headerlink" title="js实现表格固定表头和列"></a>js实现表格固定表头和列</h2><p>对兼容性要求高时可以考虑用js监听滚动实现固定</p><p>gif效果图：</p><p><img src="https://yanxuan.nosdn.127.net/83e278cbe3a7df608d7795869b941499.gif" alt=""></p><p><a href="https://codepen.io/wangcherry/pen/PXXRZd" target="_blank" rel="noopener">查看源码</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>文件下载和页面打印</title>
      <link href="/blog/2018/12/27/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%92%8C%E9%A1%B5%E9%9D%A2%E6%89%93%E5%8D%B0/"/>
      <url>/blog/2018/12/27/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%92%8C%E9%A1%B5%E9%9D%A2%E6%89%93%E5%8D%B0/</url>
      
        <content type="html"><![CDATA[<p>文件下载和页面打印在业务中有很多使用场景，它们的本质是一样的，都是向后端发一个请求，然后后端返回一个文件。浏览器将文件下载下来，（打印的情况，就是返回html文件，文件加载完之后调浏览器的打印）。</p><p>下面主要从文件下载讨论：</p><h2 id="使用-a-标签"><a href="#使用-a-标签" class="headerlink" title="使用 a 标签"></a>使用 a 标签</h2><p>最基础的用法，加 download 属性，浏览器下载该文件。<br>缺点：</p><ul><li>不能使用post方法</li><li>不能在启动下载时禁用按钮、下载完毕启用按钮<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/xhr/doc/ts实践总结&amp;ts解析.pptx"</span> <span class="attr">download</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="关于-download-重命名"><a href="#关于-download-重命名" class="headerlink" title="关于 download 重命名"></a>关于 download 重命名</h6><ul><li>download 的值可作为文件的名称</li><li>后端如果对文件命名，那么会使用后端的命名</li><li>在后端没有命名时，以 download 的值为文件名称</li><li>都没命名时，或者 download 值设置为空时，下载的文件用文件本身的名称</li></ul><h2 id="window-open"><a href="#window-open" class="headerlink" title="window.open"></a>window.open</h2><p>缺点：</p><ul><li>异步回调函数里调 window.open 会被浏览器拦截<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载方法</span></span><br><span class="line"><span class="comment"> * @param url</span></span><br><span class="line"><span class="comment"> * @param target</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> windowOpen = <span class="function">(<span class="params">url: <span class="built_in">string</span>, target: <span class="built_in">string</span> = '_blank'</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.open(url, target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="动态创建-a-标签"><a href="#动态创建-a-标签" class="headerlink" title="动态创建 a 标签"></a>动态创建 a 标签</h2><p>如果在某些业务操作之后再下载的情况，就可以动态创建一个 a 标签。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载方法</span></span><br><span class="line"><span class="comment"> * @param url</span></span><br><span class="line"><span class="comment"> * @param target</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> download = <span class="function">(<span class="params">url: <span class="built_in">string</span>, target: <span class="built_in">string</span> = '_blank', fileNmae: <span class="built_in">string</span> = ''</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">    a.id = <span class="string">`download<span class="subst">$&#123;Date.now()&#125;</span>`</span>;</span><br><span class="line">    a.href = url;</span><br><span class="line">    a.target = target;</span><br><span class="line">    a.download = fileNmae;</span><br><span class="line">    <span class="keyword">const</span> body = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>];</span><br><span class="line">    body.appendChild(a);</span><br><span class="line">    a.click();</span><br><span class="line">    body.removeChild(a);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="iframe-form"><a href="#iframe-form" class="headerlink" title="iframe + form"></a>iframe + form</h2><ul><li>不管是 a 标签还是 window.open ，在异步回调里都可能会被浏览器拦截（具体看浏览器，因为不是用户发起的页面跳转，有些浏览器会认为不安全）</li><li>或者是下载请求需要带复杂对象参数，需要用 post 方法，可以使用 iframe + form 利用表单的形式带参数。<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载方法</span></span><br><span class="line"><span class="comment"> * @param url</span></span><br><span class="line"><span class="comment"> * @param target</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> download = <span class="function">(<span class="params">url: <span class="built_in">string</span>, params: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> body = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">const</span> oldIframe = <span class="built_in">document</span>.getElementById(<span class="string">'perfectIframe'</span>);</span><br><span class="line">    <span class="keyword">const</span> oldForm = <span class="built_in">document</span>.getElementById(<span class="string">'perfectForm'</span>);</span><br><span class="line">    <span class="keyword">const</span> oldInput = <span class="built_in">document</span>.getElementById(<span class="string">'perfectInput'</span>);</span><br><span class="line">    <span class="keyword">if</span> (oldIframe &amp;&amp; oldForm &amp;&amp; oldInput) &#123;</span><br><span class="line">        oldForm.setAttribute(<span class="string">'action'</span>, url);</span><br><span class="line">        oldInput.setAttribute(<span class="string">'value'</span>, <span class="built_in">JSON</span>.stringify(params));</span><br><span class="line">        <span class="built_in">document</span>.forms[<span class="string">'perfectForm'</span>].submit();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">        iframe.setAttribute(<span class="string">'name'</span>, <span class="string">'form_target'</span>);</span><br><span class="line">        iframe.setAttribute(<span class="string">'id'</span>, <span class="string">'perfectIframe'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> form = <span class="built_in">document</span>.createElement(<span class="string">'form'</span>);</span><br><span class="line">        form.setAttribute(<span class="string">'id'</span>, <span class="string">'perfectForm'</span>);</span><br><span class="line">        form.setAttribute(<span class="string">'name'</span>, <span class="string">'perfectForm'</span>);</span><br><span class="line">        form.setAttribute(<span class="string">'method'</span>, <span class="string">'post'</span>);</span><br><span class="line">        form.setAttribute(<span class="string">'action'</span>, url);</span><br><span class="line">        form.setAttribute(<span class="string">'target'</span>, <span class="string">'form_target'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> hiddenField = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">        hiddenField.setAttribute(<span class="string">'id'</span>, <span class="string">'perfectInput'</span>);</span><br><span class="line">        hiddenField.setAttribute(<span class="string">'type'</span>, <span class="string">'hidden'</span>);</span><br><span class="line">        hiddenField.setAttribute(<span class="string">'name'</span>, <span class="string">'value'</span>);</span><br><span class="line">        hiddenField.setAttribute(<span class="string">'value'</span>, <span class="built_in">JSON</span>.stringify(params));</span><br><span class="line"></span><br><span class="line">        form.appendChild(hiddenField);</span><br><span class="line">        body.appendChild(form);</span><br><span class="line">        body.appendChild(iframe);</span><br><span class="line">        form.submit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用-fetch-完成下载"><a href="#使用-fetch-完成下载" class="headerlink" title="使用 fetch 完成下载"></a>使用 fetch 完成下载</h2><ul><li>对于 post 请求后端直接返回文件流的情况，可以使用 fetch 下载。</li><li>更多 Fetch 知识请查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">MDN</a><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载方法</span></span><br><span class="line"><span class="comment"> * @param url</span></span><br><span class="line"><span class="comment"> * @param target</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">const</span> downloadByFetch() &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">'/xhr/doc/test.pptx'</span>);</span><br><span class="line">    <span class="keyword">const</span> r = <span class="keyword">await</span> res.blob();</span><br><span class="line">    <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([r], &#123;<span class="keyword">type</span>: <span class="string">"application/octet-stream"</span>&#125;);</span><br><span class="line">    <span class="keyword">const</span> url = <span class="built_in">window</span>.URL.createObjectURL(blob);</span><br><span class="line">    ... <span class="comment">// 动态创建 a 标签完成</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="DEMO源码"><a href="#DEMO源码" class="headerlink" title="DEMO源码"></a>DEMO源码</h3><p>html：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1：点击 下载 来下载文件：<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>a 标签 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/xhr/doc/test.pptx"</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>window.open 下载 <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"windowOpen('/xhr/doc/test.pptx');"</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>动态创建 a 标签 <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"createAEle('/xhr/doc/test.pptx');"</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>异步请求回调里下载 <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"downloadAfterAsync();"</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>ajax回调里下载 <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"downloadAfterAjax();"</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>form 表单提交 <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"formDownload('/xhr/doc/test.pptx',&#123;a:1,b:2&#125;);"</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>使用fetch下载 <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"downloadByFetch();"</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    function windowOpen(url) &#123;</span></span><br><span class="line"><span class="undefined">        window.open(url,'_blank');</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    function createAEle(url, target, fileName) &#123;</span></span><br><span class="line"><span class="undefined">        const a = document.createElement('a');</span></span><br><span class="line"><span class="undefined">        a.id = `download$&#123;Date.now()&#125;`;</span></span><br><span class="line"><span class="undefined">        a.href = url;</span></span><br><span class="line"><span class="undefined">        a.target = target || '_target';</span></span><br><span class="line"><span class="undefined">        a.download = fileName ? fileName : undefined;</span></span><br><span class="line"><span class="undefined">        const body = document.getElementsByTagName('body')[0];</span></span><br><span class="line"><span class="undefined">        body.appendChild(a);</span></span><br><span class="line"><span class="undefined">        a.click();</span></span><br><span class="line"><span class="undefined">        body.removeChild(a);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">    function downloadAfterAsync() &#123;</span></span><br><span class="line"><span class="undefined">        const http = new XMLHttpRequest();</span></span><br><span class="line"><span class="undefined">        http.open('GET','/xhr/get/url.json');</span></span><br><span class="line"><span class="undefined">        http.send();</span></span><br><span class="line"><span class="undefined">        http.onreadystatechange = () =&gt; &#123;</span></span><br><span class="line"><span class="undefined">            if(http.readyState === 4 &amp;&amp; http.status === 200) &#123;</span></span><br><span class="line"><span class="undefined">                const url = http.responseText;</span></span><br><span class="line"><span class="undefined">                // createAEle(url); // 有些浏览器，动态创建表单也会拦截</span></span><br><span class="line"><span class="undefined">                // windowOpen(url); // 异步回调里调用，浏览器会拦截</span></span><br><span class="line"><span class="undefined">                formDownload(url); // 不拦截</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    function downloadAfterAjax() &#123;</span></span><br><span class="line"><span class="undefined">        $.ajax(&#123;</span></span><br><span class="line"><span class="undefined">            method: 'GET',</span></span><br><span class="line"><span class="undefined">            url: '/xhr/get/url.json',</span></span><br><span class="line"><span class="undefined">            async: false // 将异步改为同步，浏览器不拦截</span></span><br><span class="line"><span class="undefined">        &#125;).done(url =&gt; &#123;</span></span><br><span class="line"><span class="undefined">            windowOpen(url);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    function formDownload(url, params) &#123;// 可以使用post方法，携带大对象参数</span></span><br><span class="line"><span class="undefined">        const body = document.getElementsByTagName('body')[0];</span></span><br><span class="line"><span class="undefined">        const oldIframe = document.getElementById('perfectIframe');</span></span><br><span class="line"><span class="undefined">        const oldForm = document.getElementById('perfectForm');</span></span><br><span class="line"><span class="undefined">        const oldInput = document.getElementById('perfectInput');</span></span><br><span class="line"><span class="undefined">        if (oldIframe &amp;&amp; oldForm &amp;&amp; oldInput) &#123;</span></span><br><span class="line"><span class="undefined">            oldForm.setAttribute('action', url);</span></span><br><span class="line"><span class="undefined">            oldInput.setAttribute('value', JSON.stringify(params));</span></span><br><span class="line"><span class="undefined">            document.forms['perfectForm'].submit();</span></span><br><span class="line"><span class="undefined">        &#125; else &#123;</span></span><br><span class="line"><span class="undefined">            const iframe = document.createElement('iframe');</span></span><br><span class="line"><span class="undefined">            iframe.setAttribute('name', 'form_target');</span></span><br><span class="line"><span class="undefined">            iframe.setAttribute('id', 'perfectIframe');</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            const form = document.createElement('form');</span></span><br><span class="line"><span class="undefined">            form.setAttribute('id', 'perfectForm');</span></span><br><span class="line"><span class="undefined">            form.setAttribute('name', 'perfectForm');</span></span><br><span class="line"><span class="undefined">            form.setAttribute('method', 'post');</span></span><br><span class="line"><span class="undefined">            form.setAttribute('action', url);</span></span><br><span class="line"><span class="undefined">            form.setAttribute('target', 'form_target');</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            const hiddenField = document.createElement('input');</span></span><br><span class="line"><span class="undefined">            hiddenField.setAttribute('id', 'perfectInput');</span></span><br><span class="line"><span class="undefined">            hiddenField.setAttribute('type', 'hidden');</span></span><br><span class="line"><span class="undefined">            hiddenField.setAttribute('name', 'value');</span></span><br><span class="line"><span class="undefined">            hiddenField.setAttribute('value', JSON.stringify(params));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            form.appendChild(hiddenField);</span></span><br><span class="line"><span class="undefined">            body.appendChild(form);</span></span><br><span class="line"><span class="undefined">            body.appendChild(iframe);</span></span><br><span class="line"><span class="undefined">            form.submit();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    async function downloadByFetch() &#123;</span></span><br><span class="line"><span class="undefined">        const res = await fetch('/xhr/doc/test.pptx');</span></span><br><span class="line"><span class="undefined">        const r = await res.blob();</span></span><br><span class="line"><span class="undefined">        const blob = new Blob([r], &#123;type: "application/octet-stream"&#125;);</span></span><br><span class="line"><span class="undefined">        const url = window.URL.createObjectURL(blob);</span></span><br><span class="line"><span class="undefined">        createAEle(url, '_target', 'a.pptx');</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>server：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> fse = <span class="built_in">require</span>(<span class="string">'fse'</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">'koa-static'</span>);</span><br><span class="line"><span class="keyword">const</span> opn = <span class="built_in">require</span>(<span class="string">'opn'</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> returnFile = <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ctx.request.body);<span class="comment">// post 方法提交的参数</span></span><br><span class="line">    <span class="keyword">let</span> filePath = <span class="built_in">decodeURI</span>(ctx.path.replace(<span class="string">'/xhr/'</span>, <span class="string">''</span>));</span><br><span class="line">    <span class="keyword">if</span> (fse.existsSync(path.resolve(filePath))) &#123;</span><br><span class="line">        ctx.set(<span class="string">'Content-disposition'</span>, <span class="string">'attachment; filename=a.pptx'</span>);</span><br><span class="line">        ctx.set(<span class="string">'Content-Type'</span>, <span class="string">'application/vnd.openxmlformats-officedocument.presentationml.presentation; charset=UTF-8'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(path.resolve(filePath))</span><br><span class="line">        ctx.body = fse.readFileSync(path.resolve(filePath));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'error'</span>);</span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置静态资源</span></span><br><span class="line">app.use(<span class="keyword">static</span>(</span><br><span class="line">    path.join(__dirname, <span class="string">'./src'</span>)</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用ctx.body解析中间件</span></span><br><span class="line">app.use(bodyParser())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求</span></span><br><span class="line">router.get(<span class="string">'/xhr/doc/:name'</span>, returnFile)</span><br><span class="line">router.post(<span class="string">'/xhr/doc/:name'</span>, returnFile)</span><br><span class="line"><span class="comment">// 请求</span></span><br><span class="line">router.get(<span class="string">'/xhr/get/:name'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">'/xhr/doc/test.pptx'</span></span><br><span class="line">&#125;)</span><br><span class="line">router.post(<span class="string">'/xhr/get/:name'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">'/xhr/doc/test.pptx'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">opn(<span class="string">'http://localhost:3001/'</span>);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3001</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
