{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/material-x/source/style.less","path":"style.less","modified":0,"renderable":1},{"_id":"themes/material-x/source/fonts/icomoon.eot","path":"fonts/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/material-x/source/fonts/icomoon.ttf","path":"fonts/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/material-x/source/fonts/icomoon.woff","path":"fonts/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/material-x/source/fonts/icomoon.svg","path":"fonts/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/material-x/source/fonts/selection.json","path":"fonts/selection.json","modified":0,"renderable":1},{"_id":"themes/material-x/source/js/jquery.fitvids.js","path":"js/jquery.fitvids.js","modified":0,"renderable":1},{"_id":"themes/material-x/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/material-x/source/js/search.js","path":"js/search.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/material-x/.git","hash":"bdc108419733f1a2b3579a4ac35b696cba1499ec","modified":1545881856364},{"_id":"themes/material-x/.gitignore","hash":"f875b6524d4c61e5de0a1d9efdec1fe451d7bc07","modified":1545881856424},{"_id":"themes/material-x/README.md","hash":"40a5119fd1625aa66893cf278c9d6f18eeb495fa","modified":1545881856424},{"_id":"themes/material-x/LICENSE","hash":"13b0862f4ed1914abe887a47df2c3ca5adfa8f3f","modified":1545881856424},{"_id":"themes/material-x/_config.yml","hash":"437834b0187e98413dd75def0c59d760e1e0d1cd","modified":1545896430244},{"_id":"source/_posts/文件下载和页面打印.md","hash":"6f779e4bae544886d7003858a25949edd365b700","modified":1551683070190},{"_id":"source/_posts/表格固定表头和固定列.md","hash":"ec94fe4d67d7aa63e07ada7b2449d86d0c884140","modified":1547516851611},{"_id":"source/_posts/nodejs实现http和https代理服务.md","hash":"f7f4ab3b63c910f7fde0709577081d15303ee5cd","modified":1558263906935},{"_id":"source/_posts/barrel文件引起循环依赖.md","hash":"ceb7444515b0d0d9f7950cb7c0f25c0b1ff47a46","modified":1554777086871},{"_id":"themes/material-x/layout/archive.ejs","hash":"3e2dc8e63e0e40b57d15838fd16c68d662bce2ed","modified":1545881856428},{"_id":"themes/material-x/layout/category.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1545881856428},{"_id":"themes/material-x/layout/index.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1545881856428},{"_id":"themes/material-x/layout/layout.ejs","hash":"36a911ca7b6c831483c4777c590ec1acc0e81638","modified":1545881856428},{"_id":"themes/material-x/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1545881856429},{"_id":"themes/material-x/layout/post.ejs","hash":"a05fd1a27e1c54c9dbab9e69a257a299b0f549cc","modified":1545881856429},{"_id":"themes/material-x/layout/tag.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1545881856429},{"_id":"themes/material-x/source/style.less","hash":"ad50444f75534f36001872d4c90e1d839614402b","modified":1545881856435},{"_id":"themes/material-x/.github/ISSUE_TEMPLATE/------.md","hash":"9c7e7f3d857ae3884d2b5a4b929b209b704d1929","modified":1545881856423},{"_id":"themes/material-x/layout/_partial/categories.ejs","hash":"66110b433d629addd191f3b8757a6526d465bd2b","modified":1545881856425},{"_id":"themes/material-x/layout/_partial/archive.ejs","hash":"befa55baf3bfd680a07c386c24df3d69f375b40e","modified":1545881856424},{"_id":"themes/material-x/layout/_partial/footer.ejs","hash":"fff1d40f7347e6e6a6ca4795ab541f80646386b4","modified":1545881856425},{"_id":"themes/material-x/layout/_partial/head.ejs","hash":"08ea4763f12db68e0dbd7f3c9e5366e04af17c50","modified":1545881856425},{"_id":"themes/material-x/layout/_partial/header.ejs","hash":"0355131b89e0e9eb4f0a40a2e0368ce117b6382f","modified":1545881856425},{"_id":"themes/material-x/layout/_partial/article.ejs","hash":"d6500fdb3547a23bbc3ad872744d2614c173293e","modified":1545881856425},{"_id":"themes/material-x/layout/_partial/loading.ejs","hash":"4afd88877fe7339269f34ccca6437659dd5e0cb1","modified":1545881856425},{"_id":"themes/material-x/layout/_partial/mathjax.ejs","hash":"21b66599897b2e47fa03cbaf489ed2cbaaddedad","modified":1545881856425},{"_id":"themes/material-x/layout/_partial/post.ejs","hash":"5e2b241424ddf2e31110efc3a5fc99ad724045c8","modified":1545881856426},{"_id":"themes/material-x/layout/_partial/side.ejs","hash":"c40d0c3487e6659a1e51d0e1797b56a5f0a1f879","modified":1545881856426},{"_id":"themes/material-x/layout/_widget/author.ejs","hash":"24485e87b85c0fc732b9482baea642512cac8596","modified":1545881856427},{"_id":"themes/material-x/layout/_widget/announcement.ejs","hash":"363c8a55e88372ec44e4561d55acba4e197d2e49","modified":1545881856426},{"_id":"themes/material-x/layout/_partial/scripts.ejs","hash":"a93085b1fcfbdb004be2ae2faab799449a2983c5","modified":1545881856426},{"_id":"themes/material-x/layout/_widget/categories.ejs","hash":"b95390bf4136754b887ce80521de82b5a5a883da","modified":1545881856427},{"_id":"themes/material-x/layout/_widget/links.ejs","hash":"450ab578dc9b9c51b014d88ed218c325f0935993","modified":1545881856427},{"_id":"themes/material-x/layout/_widget/music.ejs","hash":"e81870abda45427cd8dde45dbd0ff8909397828c","modified":1545881856427},{"_id":"themes/material-x/layout/_widget/tagcloud.ejs","hash":"30a99f33fe4d5b30f299b905e55f40ba0d7d773b","modified":1545881856427},{"_id":"themes/material-x/layout/_widget/toc.ejs","hash":"46c69ea27460bb22eb38e448ab0e09fe2edccd34","modified":1545881856428},{"_id":"themes/material-x/source/fonts/icomoon.eot","hash":"931a892fd6307c0cfcbb71511ad4a38b3dd20edf","modified":1545881856429},{"_id":"themes/material-x/source/fonts/icomoon.ttf","hash":"6192fb2b38c94f77d1fed08c1969fab5ffe9a30c","modified":1545881856430},{"_id":"themes/material-x/source/fonts/icomoon.woff","hash":"0356e9be814a04187c641371fd95a7a8d9111200","modified":1545881856430},{"_id":"themes/material-x/source/fonts/icomoon.svg","hash":"37a9d40dfcd7d156cf452db75c425e797351e2b5","modified":1545881856429},{"_id":"themes/material-x/source/fonts/selection.json","hash":"498b5ba0cafb2eb5fa20f9034527eb912fa41827","modified":1545881856431},{"_id":"themes/material-x/source/js/jquery.fitvids.js","hash":"57946a22c79654014eb00fb548f727d302221873","modified":1545881856431},{"_id":"themes/material-x/source/less/_archive.less","hash":"79c6729a6e63c4c5abc584abcd50dc105a740040","modified":1545881856432},{"_id":"themes/material-x/source/js/app.js","hash":"20d08755d4320d4d558411d139c4099fe1d6e5e5","modified":1545881856431},{"_id":"themes/material-x/source/less/_base.less","hash":"ac8cd449429cef4d73f585396897195466ce3c66","modified":1545881856432},{"_id":"themes/material-x/source/js/search.js","hash":"b03a1fcd19c4189d1b490b5b284ee5625d884ce6","modified":1545881856431},{"_id":"themes/material-x/source/less/_fonts.less","hash":"d9e56fa5affcdee1c530ee5d5268a7e07644c05a","modified":1545881856433},{"_id":"themes/material-x/source/less/_footer.less","hash":"496d1b55a842cbfeffcc5b32468ff2e620af2495","modified":1545881856433},{"_id":"themes/material-x/source/less/_article.less","hash":"2981ad9cf601ff5a11dec021a599952f5a3cd286","modified":1545881856432},{"_id":"themes/material-x/source/less/_defines.less","hash":"5a36811bf3b0d252812f26be1c29c8ad5ea31cb3","modified":1545881856433},{"_id":"themes/material-x/source/less/_main.less","hash":"6dfe6792dffedb31794be061623e2b70d41972a9","modified":1545881856433},{"_id":"themes/material-x/source/less/_normalize.less","hash":"694f2c2b92df8050d177991a996f72afa89de8a9","modified":1545881856434},{"_id":"themes/material-x/source/less/_pagination.less","hash":"165e2c369faf70858b731bb6d483d8991259887e","modified":1545881856434},{"_id":"themes/material-x/source/less/_side.less","hash":"3e78967bf9d3db1f74a7b79416a3d49e93fb1c23","modified":1545881856434},{"_id":"themes/material-x/source/less/_toc.less","hash":"9d640a0df19e8e8800de38a73a274e4585a3782c","modified":1545881856435},{"_id":"themes/material-x/source/less/_tog.less","hash":"dc84e28143fc0f062a70805e3144d546ecf904e9","modified":1545881856435},{"_id":"themes/material-x/source/less/_search.less","hash":"26b684b139a23d2db2d0de0f44639c8f544956d6","modified":1545881856434},{"_id":"themes/material-x/source/less/_typo.less","hash":"6a93f9fab3e1dfac4dc80dd77bf6b1223b5fb058","modified":1545881856435},{"_id":"themes/material-x/source/less/_header.less","hash":"1c047e41cb4f49d68bc4bef7bece64fd21701843","modified":1545881856433},{"_id":"themes/material-x/source/less/_widget.less","hash":"7f5c4a488538905354ae9f1d398062c88ecef933","modified":1545881856435},{"_id":"themes/material-x/layout/_partial/post/recommended_posts.ejs","hash":"1d0749549e3afb7637c5a7c37c71237e03c99923","modified":1545881856426}],"Category":[{"name":"前端","_id":"cjvufkp1u00027h3jrmkrnivm"}],"Data":[],"Page":[],"Post":[{"title":"表格固定表头和固定列","date":"2019-01-12T08:26:52.000Z","_content":"\n平时业务中经常会碰到固定表头或者固定列的需求，对于只固定表头或者固定列的情况可以使用两个表格，利用css实现。但是对于需要同时固定表头和列的情况，就需要四个表格完成样式，js监听滚动事件。如果表格数据比较多，样式复杂，性能就会受影响，效果不是很理想。那么，我们还有其他方式实现同时固定表头和列吗？\n\n答案是，yes\n\n接下来给大家介绍下 position: sticky; 这个属性\n\n## position属性\nCSS position属性用于指定一个元素在文档中的定位方式。top，right，bottom 和 left 属性则决定了该元素的最终位置。\nposition 常用值有：\n- absolute（生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。）\n- relative（生成相对定位的元素，相对于其正常位置进行定位。）\n- fixed（生成固定定位的元素，相对于浏览器窗口进行定位。）\n- sticky（生成粘性定位元素）\n\n下面我们主要介绍的是粘性定位\n\n## 粘性定位\n属性为 position: sticky 的元素是粘性定位元素。\n\n粘性定位可以被认为是相对定位和固定定位的混合。元素在跨越特定阈值前为相对定位，之后为固定定位。举个栗子：\n\ngit效果图：\n\n![](https://yanxuan.nosdn.127.net/256ba3567699a9e07d40209c60e7a25c.gif)\n\ndt元素在到达顶部之前为相对定位，当元素的top为0之后，就固定在顶部。\n\n[查看源码](https://codepen.io/wangcherry/pen/rooJEV)\n\n## position: sticky; 实现表格固定表头和列\n一个表格轻松搞定表头和列固定\n\ngif效果图：\n\n![](https://yanxuan.nosdn.127.net/190e03363b77c9c9a8f5c91169b70fa0.gif)\n\n[查看源码](https://codepen.io/wangcherry/pen/PXXRqd)\n\n需要注意：\n- 该粘性定位元素并不脱离文档流，仍然保留元素原本在文档流中的位置。\n- 当元素在容器中被滚动超过指定的偏移值时，元素在容器内固定在指定位置。亦即如果你设置了top: 50px，那么在sticky元素到达距离相对定位的元素顶部50px的位置时固定，不再向上移动。\n- 元素固定的相对偏移是相对于离它最近的具有滚动框的祖先元素，如果祖先元素都不可以滚动，那么是相对于viewport来计算元素的偏移量\n- 须指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。并且 top 和 bottom 同时设置时，top 生效的优先级高，left 和 right 同时设置时，left 的优先级高。\n\n兼容性：\n- 这个属性的兼容性还不是很好，目前仍是一个试验性的属性，并不是W3C推荐的标准。[查看兼容性](https://caniuse.com/#search=position%3Asticky)\n![](https://yanxuan.nosdn.127.net/e68f0b5f9ed7b0932320e516d4b8d9c9.png)\n\n## js实现表格固定表头和列\n对兼容性要求高时可以考虑用js监听滚动实现固定\n\ngif效果图：\n\n![](https://yanxuan.nosdn.127.net/83e278cbe3a7df608d7795869b941499.gif)\n\n[查看源码](https://codepen.io/wangcherry/pen/PXXRZd)","source":"_posts/表格固定表头和固定列.md","raw":"---\ntitle: 表格固定表头和固定列\ndate: 2019-01-12 16:26:52\ncategories:\n    - 前端\ntags: \n    - html\n    - css\n    - js\n---\n\n平时业务中经常会碰到固定表头或者固定列的需求，对于只固定表头或者固定列的情况可以使用两个表格，利用css实现。但是对于需要同时固定表头和列的情况，就需要四个表格完成样式，js监听滚动事件。如果表格数据比较多，样式复杂，性能就会受影响，效果不是很理想。那么，我们还有其他方式实现同时固定表头和列吗？\n\n答案是，yes\n\n接下来给大家介绍下 position: sticky; 这个属性\n\n## position属性\nCSS position属性用于指定一个元素在文档中的定位方式。top，right，bottom 和 left 属性则决定了该元素的最终位置。\nposition 常用值有：\n- absolute（生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。）\n- relative（生成相对定位的元素，相对于其正常位置进行定位。）\n- fixed（生成固定定位的元素，相对于浏览器窗口进行定位。）\n- sticky（生成粘性定位元素）\n\n下面我们主要介绍的是粘性定位\n\n## 粘性定位\n属性为 position: sticky 的元素是粘性定位元素。\n\n粘性定位可以被认为是相对定位和固定定位的混合。元素在跨越特定阈值前为相对定位，之后为固定定位。举个栗子：\n\ngit效果图：\n\n![](https://yanxuan.nosdn.127.net/256ba3567699a9e07d40209c60e7a25c.gif)\n\ndt元素在到达顶部之前为相对定位，当元素的top为0之后，就固定在顶部。\n\n[查看源码](https://codepen.io/wangcherry/pen/rooJEV)\n\n## position: sticky; 实现表格固定表头和列\n一个表格轻松搞定表头和列固定\n\ngif效果图：\n\n![](https://yanxuan.nosdn.127.net/190e03363b77c9c9a8f5c91169b70fa0.gif)\n\n[查看源码](https://codepen.io/wangcherry/pen/PXXRqd)\n\n需要注意：\n- 该粘性定位元素并不脱离文档流，仍然保留元素原本在文档流中的位置。\n- 当元素在容器中被滚动超过指定的偏移值时，元素在容器内固定在指定位置。亦即如果你设置了top: 50px，那么在sticky元素到达距离相对定位的元素顶部50px的位置时固定，不再向上移动。\n- 元素固定的相对偏移是相对于离它最近的具有滚动框的祖先元素，如果祖先元素都不可以滚动，那么是相对于viewport来计算元素的偏移量\n- 须指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。并且 top 和 bottom 同时设置时，top 生效的优先级高，left 和 right 同时设置时，left 的优先级高。\n\n兼容性：\n- 这个属性的兼容性还不是很好，目前仍是一个试验性的属性，并不是W3C推荐的标准。[查看兼容性](https://caniuse.com/#search=position%3Asticky)\n![](https://yanxuan.nosdn.127.net/e68f0b5f9ed7b0932320e516d4b8d9c9.png)\n\n## js实现表格固定表头和列\n对兼容性要求高时可以考虑用js监听滚动实现固定\n\ngif效果图：\n\n![](https://yanxuan.nosdn.127.net/83e278cbe3a7df608d7795869b941499.gif)\n\n[查看源码](https://codepen.io/wangcherry/pen/PXXRZd)","slug":"表格固定表头和固定列","published":1,"updated":"2019-01-15T01:47:31.611Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvufkp1m00007h3j18rwnbym","content":"<p>平时业务中经常会碰到固定表头或者固定列的需求，对于只固定表头或者固定列的情况可以使用两个表格，利用css实现。但是对于需要同时固定表头和列的情况，就需要四个表格完成样式，js监听滚动事件。如果表格数据比较多，样式复杂，性能就会受影响，效果不是很理想。那么，我们还有其他方式实现同时固定表头和列吗？</p>\n<p>答案是，yes</p>\n<p>接下来给大家介绍下 position: sticky; 这个属性</p>\n<h2 id=\"position属性\"><a href=\"#position属性\" class=\"headerlink\" title=\"position属性\"></a>position属性</h2><p>CSS position属性用于指定一个元素在文档中的定位方式。top，right，bottom 和 left 属性则决定了该元素的最终位置。<br>position 常用值有：</p>\n<ul>\n<li>absolute（生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。）</li>\n<li>relative（生成相对定位的元素，相对于其正常位置进行定位。）</li>\n<li>fixed（生成固定定位的元素，相对于浏览器窗口进行定位。）</li>\n<li>sticky（生成粘性定位元素）</li>\n</ul>\n<p>下面我们主要介绍的是粘性定位</p>\n<h2 id=\"粘性定位\"><a href=\"#粘性定位\" class=\"headerlink\" title=\"粘性定位\"></a>粘性定位</h2><p>属性为 position: sticky 的元素是粘性定位元素。</p>\n<p>粘性定位可以被认为是相对定位和固定定位的混合。元素在跨越特定阈值前为相对定位，之后为固定定位。举个栗子：</p>\n<p>git效果图：</p>\n<p><img src=\"https://yanxuan.nosdn.127.net/256ba3567699a9e07d40209c60e7a25c.gif\" alt=\"\"></p>\n<p>dt元素在到达顶部之前为相对定位，当元素的top为0之后，就固定在顶部。</p>\n<p><a href=\"https://codepen.io/wangcherry/pen/rooJEV\" target=\"_blank\" rel=\"noopener\">查看源码</a></p>\n<h2 id=\"position-sticky-实现表格固定表头和列\"><a href=\"#position-sticky-实现表格固定表头和列\" class=\"headerlink\" title=\"position: sticky; 实现表格固定表头和列\"></a>position: sticky; 实现表格固定表头和列</h2><p>一个表格轻松搞定表头和列固定</p>\n<p>gif效果图：</p>\n<p><img src=\"https://yanxuan.nosdn.127.net/190e03363b77c9c9a8f5c91169b70fa0.gif\" alt=\"\"></p>\n<p><a href=\"https://codepen.io/wangcherry/pen/PXXRqd\" target=\"_blank\" rel=\"noopener\">查看源码</a></p>\n<p>需要注意：</p>\n<ul>\n<li>该粘性定位元素并不脱离文档流，仍然保留元素原本在文档流中的位置。</li>\n<li>当元素在容器中被滚动超过指定的偏移值时，元素在容器内固定在指定位置。亦即如果你设置了top: 50px，那么在sticky元素到达距离相对定位的元素顶部50px的位置时固定，不再向上移动。</li>\n<li>元素固定的相对偏移是相对于离它最近的具有滚动框的祖先元素，如果祖先元素都不可以滚动，那么是相对于viewport来计算元素的偏移量</li>\n<li>须指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。并且 top 和 bottom 同时设置时，top 生效的优先级高，left 和 right 同时设置时，left 的优先级高。</li>\n</ul>\n<p>兼容性：</p>\n<ul>\n<li>这个属性的兼容性还不是很好，目前仍是一个试验性的属性，并不是W3C推荐的标准。<a href=\"https://caniuse.com/#search=position%3Asticky\" target=\"_blank\" rel=\"noopener\">查看兼容性</a><br><img src=\"https://yanxuan.nosdn.127.net/e68f0b5f9ed7b0932320e516d4b8d9c9.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"js实现表格固定表头和列\"><a href=\"#js实现表格固定表头和列\" class=\"headerlink\" title=\"js实现表格固定表头和列\"></a>js实现表格固定表头和列</h2><p>对兼容性要求高时可以考虑用js监听滚动实现固定</p>\n<p>gif效果图：</p>\n<p><img src=\"https://yanxuan.nosdn.127.net/83e278cbe3a7df608d7795869b941499.gif\" alt=\"\"></p>\n<p><a href=\"https://codepen.io/wangcherry/pen/PXXRZd\" target=\"_blank\" rel=\"noopener\">查看源码</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>平时业务中经常会碰到固定表头或者固定列的需求，对于只固定表头或者固定列的情况可以使用两个表格，利用css实现。但是对于需要同时固定表头和列的情况，就需要四个表格完成样式，js监听滚动事件。如果表格数据比较多，样式复杂，性能就会受影响，效果不是很理想。那么，我们还有其他方式实现同时固定表头和列吗？</p>\n<p>答案是，yes</p>\n<p>接下来给大家介绍下 position: sticky; 这个属性</p>\n<h2 id=\"position属性\"><a href=\"#position属性\" class=\"headerlink\" title=\"position属性\"></a>position属性</h2><p>CSS position属性用于指定一个元素在文档中的定位方式。top，right，bottom 和 left 属性则决定了该元素的最终位置。<br>position 常用值有：</p>\n<ul>\n<li>absolute（生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。）</li>\n<li>relative（生成相对定位的元素，相对于其正常位置进行定位。）</li>\n<li>fixed（生成固定定位的元素，相对于浏览器窗口进行定位。）</li>\n<li>sticky（生成粘性定位元素）</li>\n</ul>\n<p>下面我们主要介绍的是粘性定位</p>\n<h2 id=\"粘性定位\"><a href=\"#粘性定位\" class=\"headerlink\" title=\"粘性定位\"></a>粘性定位</h2><p>属性为 position: sticky 的元素是粘性定位元素。</p>\n<p>粘性定位可以被认为是相对定位和固定定位的混合。元素在跨越特定阈值前为相对定位，之后为固定定位。举个栗子：</p>\n<p>git效果图：</p>\n<p><img src=\"https://yanxuan.nosdn.127.net/256ba3567699a9e07d40209c60e7a25c.gif\" alt=\"\"></p>\n<p>dt元素在到达顶部之前为相对定位，当元素的top为0之后，就固定在顶部。</p>\n<p><a href=\"https://codepen.io/wangcherry/pen/rooJEV\" target=\"_blank\" rel=\"noopener\">查看源码</a></p>\n<h2 id=\"position-sticky-实现表格固定表头和列\"><a href=\"#position-sticky-实现表格固定表头和列\" class=\"headerlink\" title=\"position: sticky; 实现表格固定表头和列\"></a>position: sticky; 实现表格固定表头和列</h2><p>一个表格轻松搞定表头和列固定</p>\n<p>gif效果图：</p>\n<p><img src=\"https://yanxuan.nosdn.127.net/190e03363b77c9c9a8f5c91169b70fa0.gif\" alt=\"\"></p>\n<p><a href=\"https://codepen.io/wangcherry/pen/PXXRqd\" target=\"_blank\" rel=\"noopener\">查看源码</a></p>\n<p>需要注意：</p>\n<ul>\n<li>该粘性定位元素并不脱离文档流，仍然保留元素原本在文档流中的位置。</li>\n<li>当元素在容器中被滚动超过指定的偏移值时，元素在容器内固定在指定位置。亦即如果你设置了top: 50px，那么在sticky元素到达距离相对定位的元素顶部50px的位置时固定，不再向上移动。</li>\n<li>元素固定的相对偏移是相对于离它最近的具有滚动框的祖先元素，如果祖先元素都不可以滚动，那么是相对于viewport来计算元素的偏移量</li>\n<li>须指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。并且 top 和 bottom 同时设置时，top 生效的优先级高，left 和 right 同时设置时，left 的优先级高。</li>\n</ul>\n<p>兼容性：</p>\n<ul>\n<li>这个属性的兼容性还不是很好，目前仍是一个试验性的属性，并不是W3C推荐的标准。<a href=\"https://caniuse.com/#search=position%3Asticky\" target=\"_blank\" rel=\"noopener\">查看兼容性</a><br><img src=\"https://yanxuan.nosdn.127.net/e68f0b5f9ed7b0932320e516d4b8d9c9.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"js实现表格固定表头和列\"><a href=\"#js实现表格固定表头和列\" class=\"headerlink\" title=\"js实现表格固定表头和列\"></a>js实现表格固定表头和列</h2><p>对兼容性要求高时可以考虑用js监听滚动实现固定</p>\n<p>gif效果图：</p>\n<p><img src=\"https://yanxuan.nosdn.127.net/83e278cbe3a7df608d7795869b941499.gif\" alt=\"\"></p>\n<p><a href=\"https://codepen.io/wangcherry/pen/PXXRZd\" target=\"_blank\" rel=\"noopener\">查看源码</a></p>\n"},{"title":"nodejs实现http和https代理服务","date":"2019-04-30T02:22:55.000Z","_content":"\n## http/https协议\n\n作为一个程序员，我们经常会使用到代理，例如将本地请求转到线上环境以复现bug；或将某些请求转发到指定服务器等。那么代理转发的实现原理是什么呢？下面将介绍nodejs如何实现http和https代理服务。\n\n关于HTTP和HTTPS协议：\n\nHTTP(Hypertext Transfer Protocol，超文本传输协议) 在OSI七层模型属于应用层协议，在网络与传输层使用可靠的数据传输协议TCP/IP，HTTP协议采用明文传输信息的方式。\n\nHTTPS (Secure Hypertext Transfer Protocol，安全超文本传输协议）是一个安全通信通道，基于HTTP开发，用于在客户端和服务器之间交换信息时采用安全套接字层(SSL)进行信息交换。通俗地讲，HTTPS是HTTP的安全版，即使用了TLS/SSL加密的HTTP协议。\n\n## http/https代理原理\n\n下面主要介绍两种代理实现，一种是“中间人”代理（《http权威指南》第六章），还有一种是隧道代理（《http权威指南》第八章）\n\n### “中间人”代理\n\nMITM（中间人）代理在实际开发和测试中经常会使用。调试接口、查看HTTP请求与响应时使用的http抓包调试工具如：Fiddler、 Charles，就是基于该原理实现的。用户通过设置代理，网络请求就会通过中间人代理，再发往正式服务器。\n\n所以我们的实现原理就是**建立一个可以同时与客户端和服务端进行通信的网络服务**。\n\n中间人代理示意图（来源于《HTTP权威指南》）：\n\n![](http://mailshark.nos-jd.163yun.com/document/static/5B345D71EFA7AF8C3DDA5B4FE5434BD7.webp)\n\nHTTP客户端会向代理发送请求报文，代理服务器必须像Web服务器一样，正确的处理请求和连接，然后返回响应。同时，代理自身要向服务器发送请求，这样，其行为就必须像正确的HTTP客户端一样，要发送请求并接受响应。\n\n那么http代理的实现方案就是：\n\n![](http://mailshark.nos-jd.163yun.com/document/static/2B7C00F90320601594FCD623CF6A4B8C.jpg)\n\n此时的代理就是“中间人”，代理拦截到请求之后可以修改请求数据，再向服务器发起请求，获取到数据后也可以修改数据，再返回给客户端。当然，代理也可以不向服务器发起请求，而是直接返回本地的数据，那就是数据mock。\n\n用node运行下面代码（注意需要设置开启代理）\n```ts\nconst http = require('http');\nconst url = require('url');\n\nfunction request(req, res) {\n    const u = url.parse(req.url);\n\n    const options = {\n        hostname : u.hostname, \n        port     : u.port || 80,\n        path     : u.path,\n        method   : req.method,\n        headers  : req.headers\n    };\n\n    const proxyReq = http.request(options, function(proxyRes) {\n        console.log('http proxy：' + options.hostname);\n        res.writeHead(proxyRes.statusCode, proxyRes.headers);\n        proxyRes.pipe(res);\n    }).on('error', function(e) {\n        res.end();\n    });\n\n    req.pipe(proxyReq);\n}\n\nconst proxy = http.createServer(request);\n\nproxy.listen(8888);\n```\n\n### 隧道代理\n\n上面已经完成了HTTP代理，那么是不是将HTTP换成HTTPS就能实现HTTPS代理呢？答案是不能，首先我们来看下HTTP和HTTPS去区别：\n\n![](http://mailshark.nos-jd.163yun.com/document/static/8F1DCA29F7FB5FE337DDFA83B6471964.jpg)\n\n从上图可以知道HTTPS的分层是在传输层之上建立了安全层，所有的HTTP请求都在安全层上传输。所以对于http代理，我们只需要拦截请求，就可获取到报文信息从而完成转发。但是对于https请求，我们无法获取安全层数据。更多SSL/TLS协议知识可以参考[SSL/TLS协议运行机制的概述](http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html)\n\n那么我们如何转发HTTPS流量呢。方法就是在客户端和服务器之间建立一条Web隧道。Web隧道用HTTP的CONNECT方法建立起来的。\n\nCONNECT方法请求隧道网关创建一条到达任意目的服务器和端口的TCP连接，并对客户端和服务器之间的后继数据进行盲转发。这种方法不仅是代理HTTPS请求，理论上可以代理所有基于TCP协议的请求。不过HTTP流量代理会耗费一次TCP连接，所以默认HTTP不走隧道代理。\n\n下图显示了CONNECT方法如何建立一条到达网关的隧道（来源于《HTTP权威指南》）：\n\n![](http://mailshark.nos-jd.163yun.com/document/static/8D7EDB84587FE23E1CB02664AE71A948.webp)\n\n那么隧道代理的实现方案就是：\n\n![](http://mailshark.nos-jd.163yun.com/document/static/65715FEE17BEE76A566731B117BB29D1.jpg)\n\n第一步：客户端像http代理发起CONNECT请求。\n第二步：http代理接收到CONNECT请求后与abc.com的433端口建立tcp连接。\n第三步：与abc.com的433端口建立tcp连接成功，通知客户端。\n\n隧道链接示例代码：\n```ts\nconst http = require('http');\nconst net = require('net');\nconst url = require('url');\n\nfunction request(req, res) {\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    res.end('响应内容');\n}\n\nfunction connect(req, cltSocket, head) {\n    console.log('TCP连接已完成');\n    // 连接到原始服务器。\n    const srvUrl = url.parse(`http://${req.url}`);\n    const srvSocket = net.connect(srvUrl.port, srvUrl.hostname, () => {\n        cltSocket.write('HTTP/1.1 200 Connection Established\\r\\n' +\n            'Proxy-agent: Node.js-Proxy\\r\\n' +\n            '\\r\\n');\n        srvSocket.write(head);\n        srvSocket.pipe(cltSocket);\n        cltSocket.pipe(srvSocket);\n    });\n}\n\n// 创建 HTTP 隧道代理。\nconst proxy = http.createServer(request);\nproxy.on('connect', connect);\n\n// 代理正在运行。\nproxy.listen(8888, '127.0.0.1', () => {\n\n    // 向隧道代理发出请求。\n    const options = {\n        port: 8888,\n        host: '127.0.0.1',\n        method: 'CONNECT',\n        path: 'nodejs.cn:80'\n    };\n\n    const req = http.request(options);\n    req.end();\n\n    req.on('connect', (res, socket, head) => {\n        console.log('已连接');\n\n        // 通过 HTTP 隧道发出请求。\n        socket.write('GET / HTTP/1.1\\r\\n' +\n            'Host: nodejs.cn:80\\r\\n' +\n            'Connection: close\\r\\n' +\n            '\\r\\n');\n        socket.on('data', (chunk) => {\n            console.log(chunk.toString());\n        });\n        socket.on('end', () => {\n            proxy.close();\n        });\n    });\n});\n```\n\n### 解析HTTPS请求明文信息\n\n如果我们需要将请求转发到指定目标服务器，那么就需要解析HTTPS的请求报文了。我们都知道SSL的三大功能：内容加密、身份验证和校验机制，校验机制依赖于 MAC（Message authentication code）校验机制，下面主要谈一下身份验证和内容加密。\n\n首先，我们需要支持身份认证，才能建立安全连接。身份认证依赖于证书认证机制，域名证书 是每个支持HTTPS网站都需要有的一份证书，用于客户端验证该网站的安全性，而该证书通常是通过安全机构申请的，这个机构就是 CA（Certificate Authority，证书颁发机构）。在每台用户计算机的操作系统或浏览器中，都会维护一份受信任的CA列表，浏览器在获取到域名证书之后，会向CA根证书进行验证，包含在列表之中的证书，或者由列表中的证书签发的证书都会被客户端信任，如果验证通过则能正常收发请求。\n\n客户端验证服务器证书示意图：\n\n![](http://mailshark.nos-jd.163yun.com/document/static/0C79160D00CC86678172657A77CDC566.jpg)\n\n由于代理服务器并没有合法的域名证书（证书只存在真实目标服务器，无法获取到），所以我们需要在代理服务器上伪造证书，实现方案是，node生成根证书，安装并信任，在拦截到https请求时，我们利用根证书动态签发域名证书，并将证书返回给浏览器，浏览器验证证书，由于域名证书是我们信任的根证书签发的，所以会验证通过。\n\n生成根证书：\n```base\nopenssl genrsa -out private.pem 2048\nopenssl req -new -x509 -key private.pem -out public.crt -days 99999\n```\n注意运行第二条信息时，需要填写一些证书信息，我们是本地测试，Common Name 可以填写127.0.0.1。然后安装并信任即可（安装信任证书请自行百度）\n\n最后，我们来看下代理服务器如何解析HTTPS请求报文。我们知道，SSL的内容加密功能依赖于密钥协商机制，\n\n报文信息加密解密示意图（简化版）：\n\n![](http://mailshark.nos-jd.163yun.com/document/static/0C79160D00CC86678172657A77CDC566.jpg)\n\n1，建立连接时，客户端发起请求；代理拦截后生成域名证书B和私钥b，并用私钥b给证书B签名；同时，代理跟服务器建立连接；服务器用私钥a给证书A签名，并返回给代理；代理将证书B返回给客户端。随后客户端随机生成主密钥M，并用证书B加密，由主密钥生成会话密钥Q；代理拦截后用私钥b解密获得主密钥M，并随机生成主密钥N，用证书A加密发往服务器，并由主密钥生成会话密钥P；服务器解密获得主密钥N。\n2，完成连接后，客户端用会话密钥Q加密请求；代理拦截后解密获得明文信息，再用会话密钥P加密发往服务器；服务器解密获得明文信息，返回数据；\n\n到此，我们的代理就能解析HTTPS请求的明文信息了，也可以修改信息后发往目标服务器，从而实现HTTPS代理。\n\n### 总结\n\n","source":"_posts/nodejs实现http和https代理服务.md","raw":"---\ntitle: nodejs实现http和https代理服务\ndate: 2019-04-30 10:22:55\ncategories:\n    - 前端\ntags: \n    - node\n---\n\n## http/https协议\n\n作为一个程序员，我们经常会使用到代理，例如将本地请求转到线上环境以复现bug；或将某些请求转发到指定服务器等。那么代理转发的实现原理是什么呢？下面将介绍nodejs如何实现http和https代理服务。\n\n关于HTTP和HTTPS协议：\n\nHTTP(Hypertext Transfer Protocol，超文本传输协议) 在OSI七层模型属于应用层协议，在网络与传输层使用可靠的数据传输协议TCP/IP，HTTP协议采用明文传输信息的方式。\n\nHTTPS (Secure Hypertext Transfer Protocol，安全超文本传输协议）是一个安全通信通道，基于HTTP开发，用于在客户端和服务器之间交换信息时采用安全套接字层(SSL)进行信息交换。通俗地讲，HTTPS是HTTP的安全版，即使用了TLS/SSL加密的HTTP协议。\n\n## http/https代理原理\n\n下面主要介绍两种代理实现，一种是“中间人”代理（《http权威指南》第六章），还有一种是隧道代理（《http权威指南》第八章）\n\n### “中间人”代理\n\nMITM（中间人）代理在实际开发和测试中经常会使用。调试接口、查看HTTP请求与响应时使用的http抓包调试工具如：Fiddler、 Charles，就是基于该原理实现的。用户通过设置代理，网络请求就会通过中间人代理，再发往正式服务器。\n\n所以我们的实现原理就是**建立一个可以同时与客户端和服务端进行通信的网络服务**。\n\n中间人代理示意图（来源于《HTTP权威指南》）：\n\n![](http://mailshark.nos-jd.163yun.com/document/static/5B345D71EFA7AF8C3DDA5B4FE5434BD7.webp)\n\nHTTP客户端会向代理发送请求报文，代理服务器必须像Web服务器一样，正确的处理请求和连接，然后返回响应。同时，代理自身要向服务器发送请求，这样，其行为就必须像正确的HTTP客户端一样，要发送请求并接受响应。\n\n那么http代理的实现方案就是：\n\n![](http://mailshark.nos-jd.163yun.com/document/static/2B7C00F90320601594FCD623CF6A4B8C.jpg)\n\n此时的代理就是“中间人”，代理拦截到请求之后可以修改请求数据，再向服务器发起请求，获取到数据后也可以修改数据，再返回给客户端。当然，代理也可以不向服务器发起请求，而是直接返回本地的数据，那就是数据mock。\n\n用node运行下面代码（注意需要设置开启代理）\n```ts\nconst http = require('http');\nconst url = require('url');\n\nfunction request(req, res) {\n    const u = url.parse(req.url);\n\n    const options = {\n        hostname : u.hostname, \n        port     : u.port || 80,\n        path     : u.path,\n        method   : req.method,\n        headers  : req.headers\n    };\n\n    const proxyReq = http.request(options, function(proxyRes) {\n        console.log('http proxy：' + options.hostname);\n        res.writeHead(proxyRes.statusCode, proxyRes.headers);\n        proxyRes.pipe(res);\n    }).on('error', function(e) {\n        res.end();\n    });\n\n    req.pipe(proxyReq);\n}\n\nconst proxy = http.createServer(request);\n\nproxy.listen(8888);\n```\n\n### 隧道代理\n\n上面已经完成了HTTP代理，那么是不是将HTTP换成HTTPS就能实现HTTPS代理呢？答案是不能，首先我们来看下HTTP和HTTPS去区别：\n\n![](http://mailshark.nos-jd.163yun.com/document/static/8F1DCA29F7FB5FE337DDFA83B6471964.jpg)\n\n从上图可以知道HTTPS的分层是在传输层之上建立了安全层，所有的HTTP请求都在安全层上传输。所以对于http代理，我们只需要拦截请求，就可获取到报文信息从而完成转发。但是对于https请求，我们无法获取安全层数据。更多SSL/TLS协议知识可以参考[SSL/TLS协议运行机制的概述](http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html)\n\n那么我们如何转发HTTPS流量呢。方法就是在客户端和服务器之间建立一条Web隧道。Web隧道用HTTP的CONNECT方法建立起来的。\n\nCONNECT方法请求隧道网关创建一条到达任意目的服务器和端口的TCP连接，并对客户端和服务器之间的后继数据进行盲转发。这种方法不仅是代理HTTPS请求，理论上可以代理所有基于TCP协议的请求。不过HTTP流量代理会耗费一次TCP连接，所以默认HTTP不走隧道代理。\n\n下图显示了CONNECT方法如何建立一条到达网关的隧道（来源于《HTTP权威指南》）：\n\n![](http://mailshark.nos-jd.163yun.com/document/static/8D7EDB84587FE23E1CB02664AE71A948.webp)\n\n那么隧道代理的实现方案就是：\n\n![](http://mailshark.nos-jd.163yun.com/document/static/65715FEE17BEE76A566731B117BB29D1.jpg)\n\n第一步：客户端像http代理发起CONNECT请求。\n第二步：http代理接收到CONNECT请求后与abc.com的433端口建立tcp连接。\n第三步：与abc.com的433端口建立tcp连接成功，通知客户端。\n\n隧道链接示例代码：\n```ts\nconst http = require('http');\nconst net = require('net');\nconst url = require('url');\n\nfunction request(req, res) {\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    res.end('响应内容');\n}\n\nfunction connect(req, cltSocket, head) {\n    console.log('TCP连接已完成');\n    // 连接到原始服务器。\n    const srvUrl = url.parse(`http://${req.url}`);\n    const srvSocket = net.connect(srvUrl.port, srvUrl.hostname, () => {\n        cltSocket.write('HTTP/1.1 200 Connection Established\\r\\n' +\n            'Proxy-agent: Node.js-Proxy\\r\\n' +\n            '\\r\\n');\n        srvSocket.write(head);\n        srvSocket.pipe(cltSocket);\n        cltSocket.pipe(srvSocket);\n    });\n}\n\n// 创建 HTTP 隧道代理。\nconst proxy = http.createServer(request);\nproxy.on('connect', connect);\n\n// 代理正在运行。\nproxy.listen(8888, '127.0.0.1', () => {\n\n    // 向隧道代理发出请求。\n    const options = {\n        port: 8888,\n        host: '127.0.0.1',\n        method: 'CONNECT',\n        path: 'nodejs.cn:80'\n    };\n\n    const req = http.request(options);\n    req.end();\n\n    req.on('connect', (res, socket, head) => {\n        console.log('已连接');\n\n        // 通过 HTTP 隧道发出请求。\n        socket.write('GET / HTTP/1.1\\r\\n' +\n            'Host: nodejs.cn:80\\r\\n' +\n            'Connection: close\\r\\n' +\n            '\\r\\n');\n        socket.on('data', (chunk) => {\n            console.log(chunk.toString());\n        });\n        socket.on('end', () => {\n            proxy.close();\n        });\n    });\n});\n```\n\n### 解析HTTPS请求明文信息\n\n如果我们需要将请求转发到指定目标服务器，那么就需要解析HTTPS的请求报文了。我们都知道SSL的三大功能：内容加密、身份验证和校验机制，校验机制依赖于 MAC（Message authentication code）校验机制，下面主要谈一下身份验证和内容加密。\n\n首先，我们需要支持身份认证，才能建立安全连接。身份认证依赖于证书认证机制，域名证书 是每个支持HTTPS网站都需要有的一份证书，用于客户端验证该网站的安全性，而该证书通常是通过安全机构申请的，这个机构就是 CA（Certificate Authority，证书颁发机构）。在每台用户计算机的操作系统或浏览器中，都会维护一份受信任的CA列表，浏览器在获取到域名证书之后，会向CA根证书进行验证，包含在列表之中的证书，或者由列表中的证书签发的证书都会被客户端信任，如果验证通过则能正常收发请求。\n\n客户端验证服务器证书示意图：\n\n![](http://mailshark.nos-jd.163yun.com/document/static/0C79160D00CC86678172657A77CDC566.jpg)\n\n由于代理服务器并没有合法的域名证书（证书只存在真实目标服务器，无法获取到），所以我们需要在代理服务器上伪造证书，实现方案是，node生成根证书，安装并信任，在拦截到https请求时，我们利用根证书动态签发域名证书，并将证书返回给浏览器，浏览器验证证书，由于域名证书是我们信任的根证书签发的，所以会验证通过。\n\n生成根证书：\n```base\nopenssl genrsa -out private.pem 2048\nopenssl req -new -x509 -key private.pem -out public.crt -days 99999\n```\n注意运行第二条信息时，需要填写一些证书信息，我们是本地测试，Common Name 可以填写127.0.0.1。然后安装并信任即可（安装信任证书请自行百度）\n\n最后，我们来看下代理服务器如何解析HTTPS请求报文。我们知道，SSL的内容加密功能依赖于密钥协商机制，\n\n报文信息加密解密示意图（简化版）：\n\n![](http://mailshark.nos-jd.163yun.com/document/static/0C79160D00CC86678172657A77CDC566.jpg)\n\n1，建立连接时，客户端发起请求；代理拦截后生成域名证书B和私钥b，并用私钥b给证书B签名；同时，代理跟服务器建立连接；服务器用私钥a给证书A签名，并返回给代理；代理将证书B返回给客户端。随后客户端随机生成主密钥M，并用证书B加密，由主密钥生成会话密钥Q；代理拦截后用私钥b解密获得主密钥M，并随机生成主密钥N，用证书A加密发往服务器，并由主密钥生成会话密钥P；服务器解密获得主密钥N。\n2，完成连接后，客户端用会话密钥Q加密请求；代理拦截后解密获得明文信息，再用会话密钥P加密发往服务器；服务器解密获得明文信息，返回数据；\n\n到此，我们的代理就能解析HTTPS请求的明文信息了，也可以修改信息后发往目标服务器，从而实现HTTPS代理。\n\n### 总结\n\n","slug":"nodejs实现http和https代理服务","published":1,"updated":"2019-05-19T11:05:06.935Z","_id":"cjvufkp1r00017h3jlm38gvv3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"http-https协议\"><a href=\"#http-https协议\" class=\"headerlink\" title=\"http/https协议\"></a>http/https协议</h2><p>作为一个程序员，我们经常会使用到代理，例如将本地请求转到线上环境以复现bug；或将某些请求转发到指定服务器等。那么代理转发的实现原理是什么呢？下面将介绍nodejs如何实现http和https代理服务。</p>\n<p>关于HTTP和HTTPS协议：</p>\n<p>HTTP(Hypertext Transfer Protocol，超文本传输协议) 在OSI七层模型属于应用层协议，在网络与传输层使用可靠的数据传输协议TCP/IP，HTTP协议采用明文传输信息的方式。</p>\n<p>HTTPS (Secure Hypertext Transfer Protocol，安全超文本传输协议）是一个安全通信通道，基于HTTP开发，用于在客户端和服务器之间交换信息时采用安全套接字层(SSL)进行信息交换。通俗地讲，HTTPS是HTTP的安全版，即使用了TLS/SSL加密的HTTP协议。</p>\n<h2 id=\"http-https代理原理\"><a href=\"#http-https代理原理\" class=\"headerlink\" title=\"http/https代理原理\"></a>http/https代理原理</h2><p>下面主要介绍两种代理实现，一种是“中间人”代理（《http权威指南》第六章），还有一种是隧道代理（《http权威指南》第八章）</p>\n<h3 id=\"“中间人”代理\"><a href=\"#“中间人”代理\" class=\"headerlink\" title=\"“中间人”代理\"></a>“中间人”代理</h3><p>MITM（中间人）代理在实际开发和测试中经常会使用。调试接口、查看HTTP请求与响应时使用的http抓包调试工具如：Fiddler、 Charles，就是基于该原理实现的。用户通过设置代理，网络请求就会通过中间人代理，再发往正式服务器。</p>\n<p>所以我们的实现原理就是<strong>建立一个可以同时与客户端和服务端进行通信的网络服务</strong>。</p>\n<p>中间人代理示意图（来源于《HTTP权威指南》）：</p>\n<p><img src=\"http://mailshark.nos-jd.163yun.com/document/static/5B345D71EFA7AF8C3DDA5B4FE5434BD7.webp\" alt=\"\"></p>\n<p>HTTP客户端会向代理发送请求报文，代理服务器必须像Web服务器一样，正确的处理请求和连接，然后返回响应。同时，代理自身要向服务器发送请求，这样，其行为就必须像正确的HTTP客户端一样，要发送请求并接受响应。</p>\n<p>那么http代理的实现方案就是：</p>\n<p><img src=\"http://mailshark.nos-jd.163yun.com/document/static/2B7C00F90320601594FCD623CF6A4B8C.jpg\" alt=\"\"></p>\n<p>此时的代理就是“中间人”，代理拦截到请求之后可以修改请求数据，再向服务器发起请求，获取到数据后也可以修改数据，再返回给客户端。当然，代理也可以不向服务器发起请求，而是直接返回本地的数据，那就是数据mock。</p>\n<p>用node运行下面代码（注意需要设置开启代理）<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> u = url.parse(req.url);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">        hostname : u.hostname, </span><br><span class=\"line\">        port     : u.port || <span class=\"number\">80</span>,</span><br><span class=\"line\">        path     : u.path,</span><br><span class=\"line\">        method   : req.method,</span><br><span class=\"line\">        headers  : req.headers</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> proxyReq = http.request(options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">proxyRes</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'http proxy：'</span> + options.hostname);</span><br><span class=\"line\">        res.writeHead(proxyRes.statusCode, proxyRes.headers);</span><br><span class=\"line\">        proxyRes.pipe(res);</span><br><span class=\"line\">    &#125;).on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        res.end();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    req.pipe(proxyReq);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = http.createServer(request);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.listen(<span class=\"number\">8888</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"隧道代理\"><a href=\"#隧道代理\" class=\"headerlink\" title=\"隧道代理\"></a>隧道代理</h3><p>上面已经完成了HTTP代理，那么是不是将HTTP换成HTTPS就能实现HTTPS代理呢？答案是不能，首先我们来看下HTTP和HTTPS去区别：</p>\n<p><img src=\"http://mailshark.nos-jd.163yun.com/document/static/8F1DCA29F7FB5FE337DDFA83B6471964.jpg\" alt=\"\"></p>\n<p>从上图可以知道HTTPS的分层是在传输层之上建立了安全层，所有的HTTP请求都在安全层上传输。所以对于http代理，我们只需要拦截请求，就可获取到报文信息从而完成转发。但是对于https请求，我们无法获取安全层数据。更多SSL/TLS协议知识可以参考<a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\" target=\"_blank\" rel=\"noopener\">SSL/TLS协议运行机制的概述</a></p>\n<p>那么我们如何转发HTTPS流量呢。方法就是在客户端和服务器之间建立一条Web隧道。Web隧道用HTTP的CONNECT方法建立起来的。</p>\n<p>CONNECT方法请求隧道网关创建一条到达任意目的服务器和端口的TCP连接，并对客户端和服务器之间的后继数据进行盲转发。这种方法不仅是代理HTTPS请求，理论上可以代理所有基于TCP协议的请求。不过HTTP流量代理会耗费一次TCP连接，所以默认HTTP不走隧道代理。</p>\n<p>下图显示了CONNECT方法如何建立一条到达网关的隧道（来源于《HTTP权威指南》）：</p>\n<p><img src=\"http://mailshark.nos-jd.163yun.com/document/static/8D7EDB84587FE23E1CB02664AE71A948.webp\" alt=\"\"></p>\n<p>那么隧道代理的实现方案就是：</p>\n<p><img src=\"http://mailshark.nos-jd.163yun.com/document/static/65715FEE17BEE76A566731B117BB29D1.jpg\" alt=\"\"></p>\n<p>第一步：客户端像http代理发起CONNECT请求。<br>第二步：http代理接收到CONNECT请求后与abc.com的433端口建立tcp连接。<br>第三步：与abc.com的433端口建立tcp连接成功，通知客户端。</p>\n<p>隧道链接示例代码：<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    res.writeHead(<span class=\"number\">200</span>, &#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span> &#125;);</span><br><span class=\"line\">    res.end(<span class=\"string\">'响应内容'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span>(<span class=\"params\">req, cltSocket, head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'TCP连接已完成'</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 连接到原始服务器。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> srvUrl = url.parse(<span class=\"string\">`http://<span class=\"subst\">$&#123;req.url&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> srvSocket = net.connect(srvUrl.port, srvUrl.hostname, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        cltSocket.write(<span class=\"string\">'HTTP/1.1 200 Connection Established\\r\\n'</span> +</span><br><span class=\"line\">            <span class=\"string\">'Proxy-agent: Node.js-Proxy\\r\\n'</span> +</span><br><span class=\"line\">            <span class=\"string\">'\\r\\n'</span>);</span><br><span class=\"line\">        srvSocket.write(head);</span><br><span class=\"line\">        srvSocket.pipe(cltSocket);</span><br><span class=\"line\">        cltSocket.pipe(srvSocket);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建 HTTP 隧道代理。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = http.createServer(request);</span><br><span class=\"line\">proxy.on(<span class=\"string\">'connect'</span>, connect);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 代理正在运行。</span></span><br><span class=\"line\">proxy.listen(<span class=\"number\">8888</span>, <span class=\"string\">'127.0.0.1'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向隧道代理发出请求。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">        port: <span class=\"number\">8888</span>,</span><br><span class=\"line\">        host: <span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">        method: <span class=\"string\">'CONNECT'</span>,</span><br><span class=\"line\">        path: <span class=\"string\">'nodejs.cn:80'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> req = http.request(options);</span><br><span class=\"line\">    req.end();</span><br><span class=\"line\"></span><br><span class=\"line\">    req.on(<span class=\"string\">'connect'</span>, <span class=\"function\">(<span class=\"params\">res, socket, head</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'已连接'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 通过 HTTP 隧道发出请求。</span></span><br><span class=\"line\">        socket.write(<span class=\"string\">'GET / HTTP/1.1\\r\\n'</span> +</span><br><span class=\"line\">            <span class=\"string\">'Host: nodejs.cn:80\\r\\n'</span> +</span><br><span class=\"line\">            <span class=\"string\">'Connection: close\\r\\n'</span> +</span><br><span class=\"line\">            <span class=\"string\">'\\r\\n'</span>);</span><br><span class=\"line\">        socket.on(<span class=\"string\">'data'</span>, <span class=\"function\">(<span class=\"params\">chunk</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(chunk.toString());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        socket.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            proxy.close();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"解析HTTPS请求明文信息\"><a href=\"#解析HTTPS请求明文信息\" class=\"headerlink\" title=\"解析HTTPS请求明文信息\"></a>解析HTTPS请求明文信息</h3><p>如果我们需要将请求转发到指定目标服务器，那么就需要解析HTTPS的请求报文了。我们都知道SSL的三大功能：内容加密、身份验证和校验机制，校验机制依赖于 MAC（Message authentication code）校验机制，下面主要谈一下身份验证和内容加密。</p>\n<p>首先，我们需要支持身份认证，才能建立安全连接。身份认证依赖于证书认证机制，域名证书 是每个支持HTTPS网站都需要有的一份证书，用于客户端验证该网站的安全性，而该证书通常是通过安全机构申请的，这个机构就是 CA（Certificate Authority，证书颁发机构）。在每台用户计算机的操作系统或浏览器中，都会维护一份受信任的CA列表，浏览器在获取到域名证书之后，会向CA根证书进行验证，包含在列表之中的证书，或者由列表中的证书签发的证书都会被客户端信任，如果验证通过则能正常收发请求。</p>\n<p>客户端验证服务器证书示意图：</p>\n<p><img src=\"http://mailshark.nos-jd.163yun.com/document/static/0C79160D00CC86678172657A77CDC566.jpg\" alt=\"\"></p>\n<p>由于代理服务器并没有合法的域名证书（证书只存在真实目标服务器，无法获取到），所以我们需要在代理服务器上伪造证书，实现方案是，node生成根证书，安装并信任，在拦截到https请求时，我们利用根证书动态签发域名证书，并将证书返回给浏览器，浏览器验证证书，由于域名证书是我们信任的根证书签发的，所以会验证通过。</p>\n<p>生成根证书：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out private.pem 2048</span><br><span class=\"line\">openssl req -new -x509 -key private.pem -out public.crt -days 99999</span><br></pre></td></tr></table></figure></p>\n<p>注意运行第二条信息时，需要填写一些证书信息，我们是本地测试，Common Name 可以填写127.0.0.1。然后安装并信任即可（安装信任证书请自行百度）</p>\n<p>最后，我们来看下代理服务器如何解析HTTPS请求报文。我们知道，SSL的内容加密功能依赖于密钥协商机制，</p>\n<p>报文信息加密解密示意图（简化版）：</p>\n<p><img src=\"http://mailshark.nos-jd.163yun.com/document/static/0C79160D00CC86678172657A77CDC566.jpg\" alt=\"\"></p>\n<p>1，建立连接时，客户端发起请求；代理拦截后生成域名证书B和私钥b，并用私钥b给证书B签名；同时，代理跟服务器建立连接；服务器用私钥a给证书A签名，并返回给代理；代理将证书B返回给客户端。随后客户端随机生成主密钥M，并用证书B加密，由主密钥生成会话密钥Q；代理拦截后用私钥b解密获得主密钥M，并随机生成主密钥N，用证书A加密发往服务器，并由主密钥生成会话密钥P；服务器解密获得主密钥N。<br>2，完成连接后，客户端用会话密钥Q加密请求；代理拦截后解密获得明文信息，再用会话密钥P加密发往服务器；服务器解密获得明文信息，返回数据；</p>\n<p>到此，我们的代理就能解析HTTPS请求的明文信息了，也可以修改信息后发往目标服务器，从而实现HTTPS代理。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"http-https协议\"><a href=\"#http-https协议\" class=\"headerlink\" title=\"http/https协议\"></a>http/https协议</h2><p>作为一个程序员，我们经常会使用到代理，例如将本地请求转到线上环境以复现bug；或将某些请求转发到指定服务器等。那么代理转发的实现原理是什么呢？下面将介绍nodejs如何实现http和https代理服务。</p>\n<p>关于HTTP和HTTPS协议：</p>\n<p>HTTP(Hypertext Transfer Protocol，超文本传输协议) 在OSI七层模型属于应用层协议，在网络与传输层使用可靠的数据传输协议TCP/IP，HTTP协议采用明文传输信息的方式。</p>\n<p>HTTPS (Secure Hypertext Transfer Protocol，安全超文本传输协议）是一个安全通信通道，基于HTTP开发，用于在客户端和服务器之间交换信息时采用安全套接字层(SSL)进行信息交换。通俗地讲，HTTPS是HTTP的安全版，即使用了TLS/SSL加密的HTTP协议。</p>\n<h2 id=\"http-https代理原理\"><a href=\"#http-https代理原理\" class=\"headerlink\" title=\"http/https代理原理\"></a>http/https代理原理</h2><p>下面主要介绍两种代理实现，一种是“中间人”代理（《http权威指南》第六章），还有一种是隧道代理（《http权威指南》第八章）</p>\n<h3 id=\"“中间人”代理\"><a href=\"#“中间人”代理\" class=\"headerlink\" title=\"“中间人”代理\"></a>“中间人”代理</h3><p>MITM（中间人）代理在实际开发和测试中经常会使用。调试接口、查看HTTP请求与响应时使用的http抓包调试工具如：Fiddler、 Charles，就是基于该原理实现的。用户通过设置代理，网络请求就会通过中间人代理，再发往正式服务器。</p>\n<p>所以我们的实现原理就是<strong>建立一个可以同时与客户端和服务端进行通信的网络服务</strong>。</p>\n<p>中间人代理示意图（来源于《HTTP权威指南》）：</p>\n<p><img src=\"http://mailshark.nos-jd.163yun.com/document/static/5B345D71EFA7AF8C3DDA5B4FE5434BD7.webp\" alt=\"\"></p>\n<p>HTTP客户端会向代理发送请求报文，代理服务器必须像Web服务器一样，正确的处理请求和连接，然后返回响应。同时，代理自身要向服务器发送请求，这样，其行为就必须像正确的HTTP客户端一样，要发送请求并接受响应。</p>\n<p>那么http代理的实现方案就是：</p>\n<p><img src=\"http://mailshark.nos-jd.163yun.com/document/static/2B7C00F90320601594FCD623CF6A4B8C.jpg\" alt=\"\"></p>\n<p>此时的代理就是“中间人”，代理拦截到请求之后可以修改请求数据，再向服务器发起请求，获取到数据后也可以修改数据，再返回给客户端。当然，代理也可以不向服务器发起请求，而是直接返回本地的数据，那就是数据mock。</p>\n<p>用node运行下面代码（注意需要设置开启代理）<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> u = url.parse(req.url);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">        hostname : u.hostname, </span><br><span class=\"line\">        port     : u.port || <span class=\"number\">80</span>,</span><br><span class=\"line\">        path     : u.path,</span><br><span class=\"line\">        method   : req.method,</span><br><span class=\"line\">        headers  : req.headers</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> proxyReq = http.request(options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">proxyRes</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'http proxy：'</span> + options.hostname);</span><br><span class=\"line\">        res.writeHead(proxyRes.statusCode, proxyRes.headers);</span><br><span class=\"line\">        proxyRes.pipe(res);</span><br><span class=\"line\">    &#125;).on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        res.end();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    req.pipe(proxyReq);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = http.createServer(request);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.listen(<span class=\"number\">8888</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"隧道代理\"><a href=\"#隧道代理\" class=\"headerlink\" title=\"隧道代理\"></a>隧道代理</h3><p>上面已经完成了HTTP代理，那么是不是将HTTP换成HTTPS就能实现HTTPS代理呢？答案是不能，首先我们来看下HTTP和HTTPS去区别：</p>\n<p><img src=\"http://mailshark.nos-jd.163yun.com/document/static/8F1DCA29F7FB5FE337DDFA83B6471964.jpg\" alt=\"\"></p>\n<p>从上图可以知道HTTPS的分层是在传输层之上建立了安全层，所有的HTTP请求都在安全层上传输。所以对于http代理，我们只需要拦截请求，就可获取到报文信息从而完成转发。但是对于https请求，我们无法获取安全层数据。更多SSL/TLS协议知识可以参考<a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\" target=\"_blank\" rel=\"noopener\">SSL/TLS协议运行机制的概述</a></p>\n<p>那么我们如何转发HTTPS流量呢。方法就是在客户端和服务器之间建立一条Web隧道。Web隧道用HTTP的CONNECT方法建立起来的。</p>\n<p>CONNECT方法请求隧道网关创建一条到达任意目的服务器和端口的TCP连接，并对客户端和服务器之间的后继数据进行盲转发。这种方法不仅是代理HTTPS请求，理论上可以代理所有基于TCP协议的请求。不过HTTP流量代理会耗费一次TCP连接，所以默认HTTP不走隧道代理。</p>\n<p>下图显示了CONNECT方法如何建立一条到达网关的隧道（来源于《HTTP权威指南》）：</p>\n<p><img src=\"http://mailshark.nos-jd.163yun.com/document/static/8D7EDB84587FE23E1CB02664AE71A948.webp\" alt=\"\"></p>\n<p>那么隧道代理的实现方案就是：</p>\n<p><img src=\"http://mailshark.nos-jd.163yun.com/document/static/65715FEE17BEE76A566731B117BB29D1.jpg\" alt=\"\"></p>\n<p>第一步：客户端像http代理发起CONNECT请求。<br>第二步：http代理接收到CONNECT请求后与abc.com的433端口建立tcp连接。<br>第三步：与abc.com的433端口建立tcp连接成功，通知客户端。</p>\n<p>隧道链接示例代码：<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    res.writeHead(<span class=\"number\">200</span>, &#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span> &#125;);</span><br><span class=\"line\">    res.end(<span class=\"string\">'响应内容'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span>(<span class=\"params\">req, cltSocket, head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'TCP连接已完成'</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 连接到原始服务器。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> srvUrl = url.parse(<span class=\"string\">`http://<span class=\"subst\">$&#123;req.url&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> srvSocket = net.connect(srvUrl.port, srvUrl.hostname, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        cltSocket.write(<span class=\"string\">'HTTP/1.1 200 Connection Established\\r\\n'</span> +</span><br><span class=\"line\">            <span class=\"string\">'Proxy-agent: Node.js-Proxy\\r\\n'</span> +</span><br><span class=\"line\">            <span class=\"string\">'\\r\\n'</span>);</span><br><span class=\"line\">        srvSocket.write(head);</span><br><span class=\"line\">        srvSocket.pipe(cltSocket);</span><br><span class=\"line\">        cltSocket.pipe(srvSocket);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建 HTTP 隧道代理。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = http.createServer(request);</span><br><span class=\"line\">proxy.on(<span class=\"string\">'connect'</span>, connect);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 代理正在运行。</span></span><br><span class=\"line\">proxy.listen(<span class=\"number\">8888</span>, <span class=\"string\">'127.0.0.1'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向隧道代理发出请求。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">        port: <span class=\"number\">8888</span>,</span><br><span class=\"line\">        host: <span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">        method: <span class=\"string\">'CONNECT'</span>,</span><br><span class=\"line\">        path: <span class=\"string\">'nodejs.cn:80'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> req = http.request(options);</span><br><span class=\"line\">    req.end();</span><br><span class=\"line\"></span><br><span class=\"line\">    req.on(<span class=\"string\">'connect'</span>, <span class=\"function\">(<span class=\"params\">res, socket, head</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'已连接'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 通过 HTTP 隧道发出请求。</span></span><br><span class=\"line\">        socket.write(<span class=\"string\">'GET / HTTP/1.1\\r\\n'</span> +</span><br><span class=\"line\">            <span class=\"string\">'Host: nodejs.cn:80\\r\\n'</span> +</span><br><span class=\"line\">            <span class=\"string\">'Connection: close\\r\\n'</span> +</span><br><span class=\"line\">            <span class=\"string\">'\\r\\n'</span>);</span><br><span class=\"line\">        socket.on(<span class=\"string\">'data'</span>, <span class=\"function\">(<span class=\"params\">chunk</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(chunk.toString());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        socket.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            proxy.close();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"解析HTTPS请求明文信息\"><a href=\"#解析HTTPS请求明文信息\" class=\"headerlink\" title=\"解析HTTPS请求明文信息\"></a>解析HTTPS请求明文信息</h3><p>如果我们需要将请求转发到指定目标服务器，那么就需要解析HTTPS的请求报文了。我们都知道SSL的三大功能：内容加密、身份验证和校验机制，校验机制依赖于 MAC（Message authentication code）校验机制，下面主要谈一下身份验证和内容加密。</p>\n<p>首先，我们需要支持身份认证，才能建立安全连接。身份认证依赖于证书认证机制，域名证书 是每个支持HTTPS网站都需要有的一份证书，用于客户端验证该网站的安全性，而该证书通常是通过安全机构申请的，这个机构就是 CA（Certificate Authority，证书颁发机构）。在每台用户计算机的操作系统或浏览器中，都会维护一份受信任的CA列表，浏览器在获取到域名证书之后，会向CA根证书进行验证，包含在列表之中的证书，或者由列表中的证书签发的证书都会被客户端信任，如果验证通过则能正常收发请求。</p>\n<p>客户端验证服务器证书示意图：</p>\n<p><img src=\"http://mailshark.nos-jd.163yun.com/document/static/0C79160D00CC86678172657A77CDC566.jpg\" alt=\"\"></p>\n<p>由于代理服务器并没有合法的域名证书（证书只存在真实目标服务器，无法获取到），所以我们需要在代理服务器上伪造证书，实现方案是，node生成根证书，安装并信任，在拦截到https请求时，我们利用根证书动态签发域名证书，并将证书返回给浏览器，浏览器验证证书，由于域名证书是我们信任的根证书签发的，所以会验证通过。</p>\n<p>生成根证书：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out private.pem 2048</span><br><span class=\"line\">openssl req -new -x509 -key private.pem -out public.crt -days 99999</span><br></pre></td></tr></table></figure></p>\n<p>注意运行第二条信息时，需要填写一些证书信息，我们是本地测试，Common Name 可以填写127.0.0.1。然后安装并信任即可（安装信任证书请自行百度）</p>\n<p>最后，我们来看下代理服务器如何解析HTTPS请求报文。我们知道，SSL的内容加密功能依赖于密钥协商机制，</p>\n<p>报文信息加密解密示意图（简化版）：</p>\n<p><img src=\"http://mailshark.nos-jd.163yun.com/document/static/0C79160D00CC86678172657A77CDC566.jpg\" alt=\"\"></p>\n<p>1，建立连接时，客户端发起请求；代理拦截后生成域名证书B和私钥b，并用私钥b给证书B签名；同时，代理跟服务器建立连接；服务器用私钥a给证书A签名，并返回给代理；代理将证书B返回给客户端。随后客户端随机生成主密钥M，并用证书B加密，由主密钥生成会话密钥Q；代理拦截后用私钥b解密获得主密钥M，并随机生成主密钥N，用证书A加密发往服务器，并由主密钥生成会话密钥P；服务器解密获得主密钥N。<br>2，完成连接后，客户端用会话密钥Q加密请求；代理拦截后解密获得明文信息，再用会话密钥P加密发往服务器；服务器解密获得明文信息，返回数据；</p>\n<p>到此，我们的代理就能解析HTTPS请求的明文信息了，也可以修改信息后发往目标服务器，从而实现HTTPS代理。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3>"},{"title":"barrel文件引起循环依赖","date":"2019-04-08T06:07:48.000Z","_content":"\n在给QDC项目升级时，碰到这样一个报错。server没问题，build时报错\n\n![](http://mailshark.nos-jd.163yun.com/document/static/4054E39044072326F310B61AA0D366CA.jpg)\n\n没有报具体错误，按照报错翻译应该是“遇到未定义的provider，通常意味着有一个循环依赖，可能是由于使用“barrel” index.ts 文件引起的”。\n于是我检查项目中的 provider 使用没有问题，检查了各个模块之间的依赖也没有问题，注意到项目中写了很多index.ts文件，咋一看没有什么问题，比较难发现，但是仔细看index的引用发现barrel使用时有些坑需要注意。\n\n### Barrel\n先介绍一下Barrel，barrel是将多个模块的导出汇总到一个模块的一种方法。barrel本身是一个模块文件，可以重新导出其他模块的选定导出。\n\n例如有三个模块\n```ts\n// heroes/hero.component.ts\nexport class HeroComponent {}\n// heroes/hero.model.ts\nexport class Hero {}\n// heroes/hero.service.ts\nexport class HeroService {}\n\n// index.ts\nexport * from './hero.model.ts';   // re-export all of its exports\nexport * from './hero.service.ts'; // re-export all of its exports\nexport { HeroComponent } from './hero.component.ts'; // re-export the named thing\n\n// used barrel\nimport { Hero, HeroService } from '../heroes'; // index is implied\n\n// without barrel\nexport { Hero } from '../heroes/hero.model.ts';\nexport { HeroService } from '../heroes/hero.service.ts';\n```\n\n### Barrel的坑\n在导入同一个模块中的文件时使用barrel可以让文件看起来更清爽，但是在使用时需要注意，因为使用不当可能会引起循环依赖。在这个DQC这个项目中，依赖了@datapi/dscomponent这个包，包在本地打包没问题，但是发成npm包被项目引用后，项目打包就报上面的错误。我简化下，还原报错原因。\n\n目录结构：\n|---service\n|---|---a.service.ts\n|---|---b.service.ts\n|---|---index.ts\n|---table\n|---|---...\n|---|---table.module.ts\n\n例如如下使用\n```ts\n// a.service.ts\nexport class AService { }\n\n// index.ts\nexport * from './a.service.ts';\nexport * from './b.service.ts';\n\n// table.module.ts\nimport { AService } from '../service';\n@NgModule({\n    ...\n    providers: [AService]\n})\nexport class TableModule { }\n```\n`import { AService } from '../service';` 改为 `import { AService } from '../service/a.service.ts';` 后问题得到解决\n\n### angular风格指南\nangular团队已经不推荐barrel这种写法，在风格指南已经删除相关写法。\n\n所以删除项目中的barrel，改为具体文件导入。\n\n#### 参考文章\n[Angular DI Error - EXCEPTION: Can't resolve all parameters](https://stackoverflow.com/questions/37997824/angular-di-error-exception-cant-resolve-all-parameters#comment80108487_37997824)\n[Barrel and Circular dependency](https://github.com/angular/angular-cli/issues/7369)","source":"_posts/barrel文件引起循环依赖.md","raw":"---\ntitle: barrel文件引起循环依赖\ndate: 2019-04-08 14:07:48\ncategories:\n    - 前端\ntags: \n    - typescript\n---\n\n在给QDC项目升级时，碰到这样一个报错。server没问题，build时报错\n\n![](http://mailshark.nos-jd.163yun.com/document/static/4054E39044072326F310B61AA0D366CA.jpg)\n\n没有报具体错误，按照报错翻译应该是“遇到未定义的provider，通常意味着有一个循环依赖，可能是由于使用“barrel” index.ts 文件引起的”。\n于是我检查项目中的 provider 使用没有问题，检查了各个模块之间的依赖也没有问题，注意到项目中写了很多index.ts文件，咋一看没有什么问题，比较难发现，但是仔细看index的引用发现barrel使用时有些坑需要注意。\n\n### Barrel\n先介绍一下Barrel，barrel是将多个模块的导出汇总到一个模块的一种方法。barrel本身是一个模块文件，可以重新导出其他模块的选定导出。\n\n例如有三个模块\n```ts\n// heroes/hero.component.ts\nexport class HeroComponent {}\n// heroes/hero.model.ts\nexport class Hero {}\n// heroes/hero.service.ts\nexport class HeroService {}\n\n// index.ts\nexport * from './hero.model.ts';   // re-export all of its exports\nexport * from './hero.service.ts'; // re-export all of its exports\nexport { HeroComponent } from './hero.component.ts'; // re-export the named thing\n\n// used barrel\nimport { Hero, HeroService } from '../heroes'; // index is implied\n\n// without barrel\nexport { Hero } from '../heroes/hero.model.ts';\nexport { HeroService } from '../heroes/hero.service.ts';\n```\n\n### Barrel的坑\n在导入同一个模块中的文件时使用barrel可以让文件看起来更清爽，但是在使用时需要注意，因为使用不当可能会引起循环依赖。在这个DQC这个项目中，依赖了@datapi/dscomponent这个包，包在本地打包没问题，但是发成npm包被项目引用后，项目打包就报上面的错误。我简化下，还原报错原因。\n\n目录结构：\n|---service\n|---|---a.service.ts\n|---|---b.service.ts\n|---|---index.ts\n|---table\n|---|---...\n|---|---table.module.ts\n\n例如如下使用\n```ts\n// a.service.ts\nexport class AService { }\n\n// index.ts\nexport * from './a.service.ts';\nexport * from './b.service.ts';\n\n// table.module.ts\nimport { AService } from '../service';\n@NgModule({\n    ...\n    providers: [AService]\n})\nexport class TableModule { }\n```\n`import { AService } from '../service';` 改为 `import { AService } from '../service/a.service.ts';` 后问题得到解决\n\n### angular风格指南\nangular团队已经不推荐barrel这种写法，在风格指南已经删除相关写法。\n\n所以删除项目中的barrel，改为具体文件导入。\n\n#### 参考文章\n[Angular DI Error - EXCEPTION: Can't resolve all parameters](https://stackoverflow.com/questions/37997824/angular-di-error-exception-cant-resolve-all-parameters#comment80108487_37997824)\n[Barrel and Circular dependency](https://github.com/angular/angular-cli/issues/7369)","slug":"barrel文件引起循环依赖","published":1,"updated":"2019-04-09T02:31:26.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvufkp1x00047h3jd8mz4vlh","content":"<p>在给QDC项目升级时，碰到这样一个报错。server没问题，build时报错</p>\n<p><img src=\"http://mailshark.nos-jd.163yun.com/document/static/4054E39044072326F310B61AA0D366CA.jpg\" alt=\"\"></p>\n<p>没有报具体错误，按照报错翻译应该是“遇到未定义的provider，通常意味着有一个循环依赖，可能是由于使用“barrel” index.ts 文件引起的”。<br>于是我检查项目中的 provider 使用没有问题，检查了各个模块之间的依赖也没有问题，注意到项目中写了很多index.ts文件，咋一看没有什么问题，比较难发现，但是仔细看index的引用发现barrel使用时有些坑需要注意。</p>\n<h3 id=\"Barrel\"><a href=\"#Barrel\" class=\"headerlink\" title=\"Barrel\"></a>Barrel</h3><p>先介绍一下Barrel，barrel是将多个模块的导出汇总到一个模块的一种方法。barrel本身是一个模块文件，可以重新导出其他模块的选定导出。</p>\n<p>例如有三个模块<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// heroes/hero.component.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HeroComponent &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// heroes/hero.model.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Hero &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// heroes/hero.service.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HeroService &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'./hero.model.ts'</span>;   <span class=\"comment\">// re-export all of its exports</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'./hero.service.ts'</span>; <span class=\"comment\">// re-export all of its exports</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; HeroComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./hero.component.ts'</span>; <span class=\"comment\">// re-export the named thing</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// used barrel</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Hero, HeroService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../heroes'</span>; <span class=\"comment\">// index is implied</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// without barrel</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; Hero &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../heroes/hero.model.ts'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; HeroService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../heroes/hero.service.ts'</span>;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Barrel的坑\"><a href=\"#Barrel的坑\" class=\"headerlink\" title=\"Barrel的坑\"></a>Barrel的坑</h3><p>在导入同一个模块中的文件时使用barrel可以让文件看起来更清爽，但是在使用时需要注意，因为使用不当可能会引起循环依赖。在这个DQC这个项目中，依赖了@datapi/dscomponent这个包，包在本地打包没问题，但是发成npm包被项目引用后，项目打包就报上面的错误。我简化下，还原报错原因。</p>\n<p>目录结构：<br>|—service<br>|—|—a.service.ts<br>|—|—b.service.ts<br>|—|—index.ts<br>|—table<br>|—|—…<br>|—|—table.module.ts</p>\n<p>例如如下使用<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.service.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AService &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'./a.service.ts'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'./b.service.ts'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// table.module.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../service'</span>;</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    providers: [AService]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> TableModule &#123; &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>import { AService } from &#39;../service&#39;;</code> 改为 <code>import { AService } from &#39;../service/a.service.ts&#39;;</code> 后问题得到解决</p>\n<h3 id=\"angular风格指南\"><a href=\"#angular风格指南\" class=\"headerlink\" title=\"angular风格指南\"></a>angular风格指南</h3><p>angular团队已经不推荐barrel这种写法，在风格指南已经删除相关写法。</p>\n<p>所以删除项目中的barrel，改为具体文件导入。</p>\n<h4 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h4><p><a href=\"https://stackoverflow.com/questions/37997824/angular-di-error-exception-cant-resolve-all-parameters#comment80108487_37997824\" target=\"_blank\" rel=\"noopener\">Angular DI Error - EXCEPTION: Can’t resolve all parameters</a><br><a href=\"https://github.com/angular/angular-cli/issues/7369\" target=\"_blank\" rel=\"noopener\">Barrel and Circular dependency</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在给QDC项目升级时，碰到这样一个报错。server没问题，build时报错</p>\n<p><img src=\"http://mailshark.nos-jd.163yun.com/document/static/4054E39044072326F310B61AA0D366CA.jpg\" alt=\"\"></p>\n<p>没有报具体错误，按照报错翻译应该是“遇到未定义的provider，通常意味着有一个循环依赖，可能是由于使用“barrel” index.ts 文件引起的”。<br>于是我检查项目中的 provider 使用没有问题，检查了各个模块之间的依赖也没有问题，注意到项目中写了很多index.ts文件，咋一看没有什么问题，比较难发现，但是仔细看index的引用发现barrel使用时有些坑需要注意。</p>\n<h3 id=\"Barrel\"><a href=\"#Barrel\" class=\"headerlink\" title=\"Barrel\"></a>Barrel</h3><p>先介绍一下Barrel，barrel是将多个模块的导出汇总到一个模块的一种方法。barrel本身是一个模块文件，可以重新导出其他模块的选定导出。</p>\n<p>例如有三个模块<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// heroes/hero.component.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HeroComponent &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// heroes/hero.model.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Hero &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// heroes/hero.service.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HeroService &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'./hero.model.ts'</span>;   <span class=\"comment\">// re-export all of its exports</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'./hero.service.ts'</span>; <span class=\"comment\">// re-export all of its exports</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; HeroComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./hero.component.ts'</span>; <span class=\"comment\">// re-export the named thing</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// used barrel</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Hero, HeroService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../heroes'</span>; <span class=\"comment\">// index is implied</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// without barrel</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; Hero &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../heroes/hero.model.ts'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; HeroService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../heroes/hero.service.ts'</span>;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Barrel的坑\"><a href=\"#Barrel的坑\" class=\"headerlink\" title=\"Barrel的坑\"></a>Barrel的坑</h3><p>在导入同一个模块中的文件时使用barrel可以让文件看起来更清爽，但是在使用时需要注意，因为使用不当可能会引起循环依赖。在这个DQC这个项目中，依赖了@datapi/dscomponent这个包，包在本地打包没问题，但是发成npm包被项目引用后，项目打包就报上面的错误。我简化下，还原报错原因。</p>\n<p>目录结构：<br>|—service<br>|—|—a.service.ts<br>|—|—b.service.ts<br>|—|—index.ts<br>|—table<br>|—|—…<br>|—|—table.module.ts</p>\n<p>例如如下使用<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.service.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AService &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'./a.service.ts'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'./b.service.ts'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// table.module.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../service'</span>;</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    providers: [AService]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> TableModule &#123; &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>import { AService } from &#39;../service&#39;;</code> 改为 <code>import { AService } from &#39;../service/a.service.ts&#39;;</code> 后问题得到解决</p>\n<h3 id=\"angular风格指南\"><a href=\"#angular风格指南\" class=\"headerlink\" title=\"angular风格指南\"></a>angular风格指南</h3><p>angular团队已经不推荐barrel这种写法，在风格指南已经删除相关写法。</p>\n<p>所以删除项目中的barrel，改为具体文件导入。</p>\n<h4 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h4><p><a href=\"https://stackoverflow.com/questions/37997824/angular-di-error-exception-cant-resolve-all-parameters#comment80108487_37997824\" target=\"_blank\" rel=\"noopener\">Angular DI Error - EXCEPTION: Can’t resolve all parameters</a><br><a href=\"https://github.com/angular/angular-cli/issues/7369\" target=\"_blank\" rel=\"noopener\">Barrel and Circular dependency</a></p>\n"},{"title":"文件下载和页面打印","date":"2018-12-27T05:58:10.000Z","_content":"\n文件下载和页面打印在业务中有很多使用场景，它们的本质是一样的，都是向后端发一个请求，然后后端返回一个文件。浏览器将文件下载下来，（打印的情况，就是返回html文件，文件加载完之后调浏览器的打印）。\n\n下面主要从文件下载讨论：\n\n## 使用 a 标签\n最基础的用法，加 download 属性，浏览器下载该文件。\n缺点：\n\n- 不能使用post方法\n- 不能在启动下载时禁用按钮、下载完毕启用按钮\n```html\n    <a href=\"/xhr/doc/ts实践总结&ts解析.pptx\" download>下载</a>\n```\n\n###### 关于 download 重命名\n- download 的值可作为文件的名称\n- 后端如果对文件命名，那么会使用后端的命名\n- 在后端没有命名时，以 download 的值为文件名称\n- 都没命名时，或者 download 值设置为空时，下载的文件用文件本身的名称\n\n## window.open\n缺点：\n\n- 异步回调函数里调 window.open 会被浏览器拦截\n```ts\n/**\n * 下载方法\n * @param url\n * @param target\n */\nexport const windowOpen = (url: string, target: string = '_blank') => {\n    window.open(url, target);\n}\n```\n\n## 动态创建 a 标签\n如果在某些业务操作之后再下载的情况，就可以动态创建一个 a 标签。\n```ts\n/**\n * 下载方法\n * @param url\n * @param target\n */\nexport const download = (url: string, target: string = '_blank', fileNmae: string = '') => {\n    const a = document.createElement('a');\n    a.id = `download${Date.now()}`;\n    a.href = url;\n    a.target = target;\n    a.download = fileNmae;\n    const body = document.getElementsByTagName('body')[0];\n    body.appendChild(a);\n    a.click();\n    body.removeChild(a);\n};\n```\n\n## iframe + form\n- 不管是 a 标签还是 window.open ，在异步回调里都可能会被浏览器拦截（具体看浏览器，因为不是用户发起的页面跳转，有些浏览器会认为不安全）\n- 或者是下载请求需要带复杂对象参数，需要用 post 方法，可以使用 iframe + form 利用表单的形式带参数。\n```ts\n/**\n * 下载方法\n * @param url\n * @param target\n */\nexport const download = (url: string, params: any) => {\n    const body = document.getElementsByTagName('body')[0];\n    const oldIframe = document.getElementById('perfectIframe');\n    const oldForm = document.getElementById('perfectForm');\n    const oldInput = document.getElementById('perfectInput');\n    if (oldIframe && oldForm && oldInput) {\n        oldForm.setAttribute('action', url);\n        oldInput.setAttribute('value', JSON.stringify(params));\n        document.forms['perfectForm'].submit();\n    } else {\n        const iframe = document.createElement('iframe');\n        iframe.setAttribute('name', 'form_target');\n        iframe.setAttribute('id', 'perfectIframe');\n\n        const form = document.createElement('form');\n        form.setAttribute('id', 'perfectForm');\n        form.setAttribute('name', 'perfectForm');\n        form.setAttribute('method', 'post');\n        form.setAttribute('action', url);\n        form.setAttribute('target', 'form_target');\n\n        const hiddenField = document.createElement('input');\n        hiddenField.setAttribute('id', 'perfectInput');\n        hiddenField.setAttribute('type', 'hidden');\n        hiddenField.setAttribute('name', 'value');\n        hiddenField.setAttribute('value', JSON.stringify(params));\n\n        form.appendChild(hiddenField);\n        body.appendChild(form);\n        body.appendChild(iframe);\n        form.submit();\n    }\n};\n```\n\n## 使用 fetch 完成下载\n- 对于 post 请求后端直接返回文件流的情况，可以使用 fetch 下载。\n- 更多 Fetch 知识请查看[MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch)\n```ts\n/**\n * 下载方法\n * @param url\n * @param target\n */\n export const downloadByFetch() {\n    const res = await fetch('/xhr/doc/test.pptx');\n    const r = await res.blob();\n    const blob = new Blob([r], {type: \"application/octet-stream\"});\n    const url = window.URL.createObjectURL(blob);\n    ... // 动态创建 a 标签完成\n }\n```\n\n### DEMO源码\nhtml：\n```html\n<p>1：点击 下载 来下载文件：<p>\n<p>a 标签 <a href=\"/xhr/doc/test.pptx\">下载</a></p>\n<p>window.open 下载 <button onclick=\"windowOpen('/xhr/doc/test.pptx');\">下载</button></p>\n<p>动态创建 a 标签 <button onclick=\"createAEle('/xhr/doc/test.pptx');\">下载</button></p>\n<p>异步请求回调里下载 <button onclick=\"downloadAfterAsync();\">下载</button></p>\n<p>ajax回调里下载 <button onclick=\"downloadAfterAjax();\">下载</button></p>\n<p>form 表单提交 <button onclick=\"formDownload('/xhr/doc/test.pptx',{a:1,b:2});\">下载</button></p>\n<p>使用fetch下载 <button onclick=\"downloadByFetch();\">下载</button></p>\n\n<script src=\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\"></script>\n<script>\n    function windowOpen(url) {\n        window.open(url,'_blank');\n    }\n    function createAEle(url, target, fileName) {\n        const a = document.createElement('a');\n        a.id = `download${Date.now()}`;\n        a.href = url;\n        a.target = target || '_target';\n        a.download = fileName ? fileName : undefined;\n        const body = document.getElementsByTagName('body')[0];\n        body.appendChild(a);\n        a.click();\n        body.removeChild(a);\n    };\n    function downloadAfterAsync() {\n        const http = new XMLHttpRequest();\n        http.open('GET','/xhr/get/url.json');\n        http.send();\n        http.onreadystatechange = () => {\n            if(http.readyState === 4 && http.status === 200) {\n                const url = http.responseText;\n                // createAEle(url); // 有些浏览器，动态创建表单也会拦截\n                // windowOpen(url); // 异步回调里调用，浏览器会拦截\n                formDownload(url); // 不拦截\n            }\n        }\n    }\n    function downloadAfterAjax() {\n        $.ajax({\n            method: 'GET',\n            url: '/xhr/get/url.json',\n            async: false // 将异步改为同步，浏览器不拦截\n        }).done(url => {\n            windowOpen(url);\n        });\n    }\n    function formDownload(url, params) {// 可以使用post方法，携带大对象参数\n        const body = document.getElementsByTagName('body')[0];\n        const oldIframe = document.getElementById('perfectIframe');\n        const oldForm = document.getElementById('perfectForm');\n        const oldInput = document.getElementById('perfectInput');\n        if (oldIframe && oldForm && oldInput) {\n            oldForm.setAttribute('action', url);\n            oldInput.setAttribute('value', JSON.stringify(params));\n            document.forms['perfectForm'].submit();\n        } else {\n            const iframe = document.createElement('iframe');\n            iframe.setAttribute('name', 'form_target');\n            iframe.setAttribute('id', 'perfectIframe');\n\n            const form = document.createElement('form');\n            form.setAttribute('id', 'perfectForm');\n            form.setAttribute('name', 'perfectForm');\n            form.setAttribute('method', 'post');\n            form.setAttribute('action', url);\n            form.setAttribute('target', 'form_target');\n\n            const hiddenField = document.createElement('input');\n            hiddenField.setAttribute('id', 'perfectInput');\n            hiddenField.setAttribute('type', 'hidden');\n            hiddenField.setAttribute('name', 'value');\n            hiddenField.setAttribute('value', JSON.stringify(params));\n\n            form.appendChild(hiddenField);\n            body.appendChild(form);\n            body.appendChild(iframe);\n            form.submit();\n        }\n    }\n    async function downloadByFetch() {\n        const res = await fetch('/xhr/doc/test.pptx');\n        const r = await res.blob();\n        const blob = new Blob([r], {type: \"application/octet-stream\"});\n        const url = window.URL.createObjectURL(blob);\n        createAEle(url, '_target', 'a.pptx');\n    }\n</script>\n```\n\nserver：\n```js\nconst Koa = require('koa');\nconst path = require('path');\nconst fse = require('fse');\nconst static = require('koa-static');\nconst opn = require('opn');\nconst Router = require('koa-router')\nconst bodyParser = require('koa-bodyparser');\n\nconst app = new Koa();\nconst router = new Router();\n\nconst returnFile = async (ctx, next) => {\n    console.log(ctx.request.body);// post 方法提交的参数\n    let filePath = decodeURI(ctx.path.replace('/xhr/', ''));\n    if (fse.existsSync(path.resolve(filePath))) {\n        ctx.set('Content-disposition', 'attachment; filename=a.pptx');\n        ctx.set('Content-Type', 'application/vnd.openxmlformats-officedocument.presentationml.presentation; charset=UTF-8');\n        console.log(path.resolve(filePath))\n        ctx.body = fse.readFileSync(path.resolve(filePath));\n    } else {\n        console.log('error');\n        await next();\n    }\n}\n\n// 配置静态资源\napp.use(static(\n    path.join(__dirname, './src')\n))\n\n// 使用ctx.body解析中间件\napp.use(bodyParser())\n\n// 请求\nrouter.get('/xhr/doc/:name', returnFile)\nrouter.post('/xhr/doc/:name', returnFile)\n// 请求\nrouter.get('/xhr/get/:name', async (ctx, next) => {\n    ctx.body = '/xhr/doc/test.pptx'\n})\nrouter.post('/xhr/get/:name', async (ctx, next) => {\n    ctx.body = '/xhr/doc/test.pptx'\n})\n\napp\n    .use(router.routes())\n    .use(router.allowedMethods());\n\n\nopn('http://localhost:3001/');\n\napp.listen(3001);\n```","source":"_posts/文件下载和页面打印.md","raw":"---\ntitle: 文件下载和页面打印\ndate: 2018-12-27 13:58:10\ncategories:\n    - 前端\ntags: \n    - typescript\n---\n\n文件下载和页面打印在业务中有很多使用场景，它们的本质是一样的，都是向后端发一个请求，然后后端返回一个文件。浏览器将文件下载下来，（打印的情况，就是返回html文件，文件加载完之后调浏览器的打印）。\n\n下面主要从文件下载讨论：\n\n## 使用 a 标签\n最基础的用法，加 download 属性，浏览器下载该文件。\n缺点：\n\n- 不能使用post方法\n- 不能在启动下载时禁用按钮、下载完毕启用按钮\n```html\n    <a href=\"/xhr/doc/ts实践总结&ts解析.pptx\" download>下载</a>\n```\n\n###### 关于 download 重命名\n- download 的值可作为文件的名称\n- 后端如果对文件命名，那么会使用后端的命名\n- 在后端没有命名时，以 download 的值为文件名称\n- 都没命名时，或者 download 值设置为空时，下载的文件用文件本身的名称\n\n## window.open\n缺点：\n\n- 异步回调函数里调 window.open 会被浏览器拦截\n```ts\n/**\n * 下载方法\n * @param url\n * @param target\n */\nexport const windowOpen = (url: string, target: string = '_blank') => {\n    window.open(url, target);\n}\n```\n\n## 动态创建 a 标签\n如果在某些业务操作之后再下载的情况，就可以动态创建一个 a 标签。\n```ts\n/**\n * 下载方法\n * @param url\n * @param target\n */\nexport const download = (url: string, target: string = '_blank', fileNmae: string = '') => {\n    const a = document.createElement('a');\n    a.id = `download${Date.now()}`;\n    a.href = url;\n    a.target = target;\n    a.download = fileNmae;\n    const body = document.getElementsByTagName('body')[0];\n    body.appendChild(a);\n    a.click();\n    body.removeChild(a);\n};\n```\n\n## iframe + form\n- 不管是 a 标签还是 window.open ，在异步回调里都可能会被浏览器拦截（具体看浏览器，因为不是用户发起的页面跳转，有些浏览器会认为不安全）\n- 或者是下载请求需要带复杂对象参数，需要用 post 方法，可以使用 iframe + form 利用表单的形式带参数。\n```ts\n/**\n * 下载方法\n * @param url\n * @param target\n */\nexport const download = (url: string, params: any) => {\n    const body = document.getElementsByTagName('body')[0];\n    const oldIframe = document.getElementById('perfectIframe');\n    const oldForm = document.getElementById('perfectForm');\n    const oldInput = document.getElementById('perfectInput');\n    if (oldIframe && oldForm && oldInput) {\n        oldForm.setAttribute('action', url);\n        oldInput.setAttribute('value', JSON.stringify(params));\n        document.forms['perfectForm'].submit();\n    } else {\n        const iframe = document.createElement('iframe');\n        iframe.setAttribute('name', 'form_target');\n        iframe.setAttribute('id', 'perfectIframe');\n\n        const form = document.createElement('form');\n        form.setAttribute('id', 'perfectForm');\n        form.setAttribute('name', 'perfectForm');\n        form.setAttribute('method', 'post');\n        form.setAttribute('action', url);\n        form.setAttribute('target', 'form_target');\n\n        const hiddenField = document.createElement('input');\n        hiddenField.setAttribute('id', 'perfectInput');\n        hiddenField.setAttribute('type', 'hidden');\n        hiddenField.setAttribute('name', 'value');\n        hiddenField.setAttribute('value', JSON.stringify(params));\n\n        form.appendChild(hiddenField);\n        body.appendChild(form);\n        body.appendChild(iframe);\n        form.submit();\n    }\n};\n```\n\n## 使用 fetch 完成下载\n- 对于 post 请求后端直接返回文件流的情况，可以使用 fetch 下载。\n- 更多 Fetch 知识请查看[MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch)\n```ts\n/**\n * 下载方法\n * @param url\n * @param target\n */\n export const downloadByFetch() {\n    const res = await fetch('/xhr/doc/test.pptx');\n    const r = await res.blob();\n    const blob = new Blob([r], {type: \"application/octet-stream\"});\n    const url = window.URL.createObjectURL(blob);\n    ... // 动态创建 a 标签完成\n }\n```\n\n### DEMO源码\nhtml：\n```html\n<p>1：点击 下载 来下载文件：<p>\n<p>a 标签 <a href=\"/xhr/doc/test.pptx\">下载</a></p>\n<p>window.open 下载 <button onclick=\"windowOpen('/xhr/doc/test.pptx');\">下载</button></p>\n<p>动态创建 a 标签 <button onclick=\"createAEle('/xhr/doc/test.pptx');\">下载</button></p>\n<p>异步请求回调里下载 <button onclick=\"downloadAfterAsync();\">下载</button></p>\n<p>ajax回调里下载 <button onclick=\"downloadAfterAjax();\">下载</button></p>\n<p>form 表单提交 <button onclick=\"formDownload('/xhr/doc/test.pptx',{a:1,b:2});\">下载</button></p>\n<p>使用fetch下载 <button onclick=\"downloadByFetch();\">下载</button></p>\n\n<script src=\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\"></script>\n<script>\n    function windowOpen(url) {\n        window.open(url,'_blank');\n    }\n    function createAEle(url, target, fileName) {\n        const a = document.createElement('a');\n        a.id = `download${Date.now()}`;\n        a.href = url;\n        a.target = target || '_target';\n        a.download = fileName ? fileName : undefined;\n        const body = document.getElementsByTagName('body')[0];\n        body.appendChild(a);\n        a.click();\n        body.removeChild(a);\n    };\n    function downloadAfterAsync() {\n        const http = new XMLHttpRequest();\n        http.open('GET','/xhr/get/url.json');\n        http.send();\n        http.onreadystatechange = () => {\n            if(http.readyState === 4 && http.status === 200) {\n                const url = http.responseText;\n                // createAEle(url); // 有些浏览器，动态创建表单也会拦截\n                // windowOpen(url); // 异步回调里调用，浏览器会拦截\n                formDownload(url); // 不拦截\n            }\n        }\n    }\n    function downloadAfterAjax() {\n        $.ajax({\n            method: 'GET',\n            url: '/xhr/get/url.json',\n            async: false // 将异步改为同步，浏览器不拦截\n        }).done(url => {\n            windowOpen(url);\n        });\n    }\n    function formDownload(url, params) {// 可以使用post方法，携带大对象参数\n        const body = document.getElementsByTagName('body')[0];\n        const oldIframe = document.getElementById('perfectIframe');\n        const oldForm = document.getElementById('perfectForm');\n        const oldInput = document.getElementById('perfectInput');\n        if (oldIframe && oldForm && oldInput) {\n            oldForm.setAttribute('action', url);\n            oldInput.setAttribute('value', JSON.stringify(params));\n            document.forms['perfectForm'].submit();\n        } else {\n            const iframe = document.createElement('iframe');\n            iframe.setAttribute('name', 'form_target');\n            iframe.setAttribute('id', 'perfectIframe');\n\n            const form = document.createElement('form');\n            form.setAttribute('id', 'perfectForm');\n            form.setAttribute('name', 'perfectForm');\n            form.setAttribute('method', 'post');\n            form.setAttribute('action', url);\n            form.setAttribute('target', 'form_target');\n\n            const hiddenField = document.createElement('input');\n            hiddenField.setAttribute('id', 'perfectInput');\n            hiddenField.setAttribute('type', 'hidden');\n            hiddenField.setAttribute('name', 'value');\n            hiddenField.setAttribute('value', JSON.stringify(params));\n\n            form.appendChild(hiddenField);\n            body.appendChild(form);\n            body.appendChild(iframe);\n            form.submit();\n        }\n    }\n    async function downloadByFetch() {\n        const res = await fetch('/xhr/doc/test.pptx');\n        const r = await res.blob();\n        const blob = new Blob([r], {type: \"application/octet-stream\"});\n        const url = window.URL.createObjectURL(blob);\n        createAEle(url, '_target', 'a.pptx');\n    }\n</script>\n```\n\nserver：\n```js\nconst Koa = require('koa');\nconst path = require('path');\nconst fse = require('fse');\nconst static = require('koa-static');\nconst opn = require('opn');\nconst Router = require('koa-router')\nconst bodyParser = require('koa-bodyparser');\n\nconst app = new Koa();\nconst router = new Router();\n\nconst returnFile = async (ctx, next) => {\n    console.log(ctx.request.body);// post 方法提交的参数\n    let filePath = decodeURI(ctx.path.replace('/xhr/', ''));\n    if (fse.existsSync(path.resolve(filePath))) {\n        ctx.set('Content-disposition', 'attachment; filename=a.pptx');\n        ctx.set('Content-Type', 'application/vnd.openxmlformats-officedocument.presentationml.presentation; charset=UTF-8');\n        console.log(path.resolve(filePath))\n        ctx.body = fse.readFileSync(path.resolve(filePath));\n    } else {\n        console.log('error');\n        await next();\n    }\n}\n\n// 配置静态资源\napp.use(static(\n    path.join(__dirname, './src')\n))\n\n// 使用ctx.body解析中间件\napp.use(bodyParser())\n\n// 请求\nrouter.get('/xhr/doc/:name', returnFile)\nrouter.post('/xhr/doc/:name', returnFile)\n// 请求\nrouter.get('/xhr/get/:name', async (ctx, next) => {\n    ctx.body = '/xhr/doc/test.pptx'\n})\nrouter.post('/xhr/get/:name', async (ctx, next) => {\n    ctx.body = '/xhr/doc/test.pptx'\n})\n\napp\n    .use(router.routes())\n    .use(router.allowedMethods());\n\n\nopn('http://localhost:3001/');\n\napp.listen(3001);\n```","slug":"文件下载和页面打印","published":1,"updated":"2019-03-04T07:04:30.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvufkp24000j7h3jpu2noiqv","content":"<p>文件下载和页面打印在业务中有很多使用场景，它们的本质是一样的，都是向后端发一个请求，然后后端返回一个文件。浏览器将文件下载下来，（打印的情况，就是返回html文件，文件加载完之后调浏览器的打印）。</p>\n<p>下面主要从文件下载讨论：</p>\n<h2 id=\"使用-a-标签\"><a href=\"#使用-a-标签\" class=\"headerlink\" title=\"使用 a 标签\"></a>使用 a 标签</h2><p>最基础的用法，加 download 属性，浏览器下载该文件。<br>缺点：</p>\n<ul>\n<li>不能使用post方法</li>\n<li>不能在启动下载时禁用按钮、下载完毕启用按钮<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/xhr/doc/ts实践总结&amp;ts解析.pptx\"</span> <span class=\"attr\">download</span>&gt;</span>下载<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"关于-download-重命名\"><a href=\"#关于-download-重命名\" class=\"headerlink\" title=\"关于 download 重命名\"></a>关于 download 重命名</h6><ul>\n<li>download 的值可作为文件的名称</li>\n<li>后端如果对文件命名，那么会使用后端的命名</li>\n<li>在后端没有命名时，以 download 的值为文件名称</li>\n<li>都没命名时，或者 download 值设置为空时，下载的文件用文件本身的名称</li>\n</ul>\n<h2 id=\"window-open\"><a href=\"#window-open\" class=\"headerlink\" title=\"window.open\"></a>window.open</h2><p>缺点：</p>\n<ul>\n<li>异步回调函数里调 window.open 会被浏览器拦截<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 下载方法</span></span><br><span class=\"line\"><span class=\"comment\"> * @param url</span></span><br><span class=\"line\"><span class=\"comment\"> * @param target</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> windowOpen = <span class=\"function\">(<span class=\"params\">url: <span class=\"built_in\">string</span>, target: <span class=\"built_in\">string</span> = '_blank'</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.open(url, target);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"动态创建-a-标签\"><a href=\"#动态创建-a-标签\" class=\"headerlink\" title=\"动态创建 a 标签\"></a>动态创建 a 标签</h2><p>如果在某些业务操作之后再下载的情况，就可以动态创建一个 a 标签。<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 下载方法</span></span><br><span class=\"line\"><span class=\"comment\"> * @param url</span></span><br><span class=\"line\"><span class=\"comment\"> * @param target</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> download = <span class=\"function\">(<span class=\"params\">url: <span class=\"built_in\">string</span>, target: <span class=\"built_in\">string</span> = '_blank', fileNmae: <span class=\"built_in\">string</span> = ''</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">    a.id = <span class=\"string\">`download<span class=\"subst\">$&#123;Date.now()&#125;</span>`</span>;</span><br><span class=\"line\">    a.href = url;</span><br><span class=\"line\">    a.target = target;</span><br><span class=\"line\">    a.download = fileNmae;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> body = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    body.appendChild(a);</span><br><span class=\"line\">    a.click();</span><br><span class=\"line\">    body.removeChild(a);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"iframe-form\"><a href=\"#iframe-form\" class=\"headerlink\" title=\"iframe + form\"></a>iframe + form</h2><ul>\n<li>不管是 a 标签还是 window.open ，在异步回调里都可能会被浏览器拦截（具体看浏览器，因为不是用户发起的页面跳转，有些浏览器会认为不安全）</li>\n<li>或者是下载请求需要带复杂对象参数，需要用 post 方法，可以使用 iframe + form 利用表单的形式带参数。<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 下载方法</span></span><br><span class=\"line\"><span class=\"comment\"> * @param url</span></span><br><span class=\"line\"><span class=\"comment\"> * @param target</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> download = <span class=\"function\">(<span class=\"params\">url: <span class=\"built_in\">string</span>, params: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> body = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldIframe = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'perfectIframe'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldForm = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'perfectForm'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldInput = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'perfectInput'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldIframe &amp;&amp; oldForm &amp;&amp; oldInput) &#123;</span><br><span class=\"line\">        oldForm.setAttribute(<span class=\"string\">'action'</span>, url);</span><br><span class=\"line\">        oldInput.setAttribute(<span class=\"string\">'value'</span>, <span class=\"built_in\">JSON</span>.stringify(params));</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.forms[<span class=\"string\">'perfectForm'</span>].submit();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'iframe'</span>);</span><br><span class=\"line\">        iframe.setAttribute(<span class=\"string\">'name'</span>, <span class=\"string\">'form_target'</span>);</span><br><span class=\"line\">        iframe.setAttribute(<span class=\"string\">'id'</span>, <span class=\"string\">'perfectIframe'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> form = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'form'</span>);</span><br><span class=\"line\">        form.setAttribute(<span class=\"string\">'id'</span>, <span class=\"string\">'perfectForm'</span>);</span><br><span class=\"line\">        form.setAttribute(<span class=\"string\">'name'</span>, <span class=\"string\">'perfectForm'</span>);</span><br><span class=\"line\">        form.setAttribute(<span class=\"string\">'method'</span>, <span class=\"string\">'post'</span>);</span><br><span class=\"line\">        form.setAttribute(<span class=\"string\">'action'</span>, url);</span><br><span class=\"line\">        form.setAttribute(<span class=\"string\">'target'</span>, <span class=\"string\">'form_target'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> hiddenField = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'input'</span>);</span><br><span class=\"line\">        hiddenField.setAttribute(<span class=\"string\">'id'</span>, <span class=\"string\">'perfectInput'</span>);</span><br><span class=\"line\">        hiddenField.setAttribute(<span class=\"string\">'type'</span>, <span class=\"string\">'hidden'</span>);</span><br><span class=\"line\">        hiddenField.setAttribute(<span class=\"string\">'name'</span>, <span class=\"string\">'value'</span>);</span><br><span class=\"line\">        hiddenField.setAttribute(<span class=\"string\">'value'</span>, <span class=\"built_in\">JSON</span>.stringify(params));</span><br><span class=\"line\"></span><br><span class=\"line\">        form.appendChild(hiddenField);</span><br><span class=\"line\">        body.appendChild(form);</span><br><span class=\"line\">        body.appendChild(iframe);</span><br><span class=\"line\">        form.submit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"使用-fetch-完成下载\"><a href=\"#使用-fetch-完成下载\" class=\"headerlink\" title=\"使用 fetch 完成下载\"></a>使用 fetch 完成下载</h2><ul>\n<li>对于 post 请求后端直接返回文件流的情况，可以使用 fetch 下载。</li>\n<li>更多 Fetch 知识请查看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch\" target=\"_blank\" rel=\"noopener\">MDN</a><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 下载方法</span></span><br><span class=\"line\"><span class=\"comment\"> * @param url</span></span><br><span class=\"line\"><span class=\"comment\"> * @param target</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"keyword\">export</span> <span class=\"keyword\">const</span> downloadByFetch() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> fetch(<span class=\"string\">'/xhr/doc/test.pptx'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> r = <span class=\"keyword\">await</span> res.blob();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> blob = <span class=\"keyword\">new</span> Blob([r], &#123;<span class=\"keyword\">type</span>: <span class=\"string\">\"application/octet-stream\"</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = <span class=\"built_in\">window</span>.URL.createObjectURL(blob);</span><br><span class=\"line\">    ... <span class=\"comment\">// 动态创建 a 标签完成</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"DEMO源码\"><a href=\"#DEMO源码\" class=\"headerlink\" title=\"DEMO源码\"></a>DEMO源码</h3><p>html：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1：点击 下载 来下载文件：<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>a 标签 <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/xhr/doc/test.pptx\"</span>&gt;</span>下载<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>window.open 下载 <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"windowOpen('/xhr/doc/test.pptx');\"</span>&gt;</span>下载<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>动态创建 a 标签 <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"createAEle('/xhr/doc/test.pptx');\"</span>&gt;</span>下载<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>异步请求回调里下载 <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"downloadAfterAsync();\"</span>&gt;</span>下载<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>ajax回调里下载 <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"downloadAfterAjax();\"</span>&gt;</span>下载<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>form 表单提交 <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"formDownload('/xhr/doc/test.pptx',&#123;a:1,b:2&#125;);\"</span>&gt;</span>下载<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>使用fetch下载 <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"downloadByFetch();\"</span>&gt;</span>下载<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    function windowOpen(url) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        window.open(url,'_blank');</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    function createAEle(url, target, fileName) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        const a = document.createElement('a');</span></span><br><span class=\"line\"><span class=\"undefined\">        a.id = `download$&#123;Date.now()&#125;`;</span></span><br><span class=\"line\"><span class=\"undefined\">        a.href = url;</span></span><br><span class=\"line\"><span class=\"undefined\">        a.target = target || '_target';</span></span><br><span class=\"line\"><span class=\"undefined\">        a.download = fileName ? fileName : undefined;</span></span><br><span class=\"line\"><span class=\"undefined\">        const body = document.getElementsByTagName('body')[0];</span></span><br><span class=\"line\"><span class=\"undefined\">        body.appendChild(a);</span></span><br><span class=\"line\"><span class=\"undefined\">        a.click();</span></span><br><span class=\"line\"><span class=\"undefined\">        body.removeChild(a);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    function downloadAfterAsync() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        const http = new XMLHttpRequest();</span></span><br><span class=\"line\"><span class=\"undefined\">        http.open('GET','/xhr/get/url.json');</span></span><br><span class=\"line\"><span class=\"undefined\">        http.send();</span></span><br><span class=\"line\"><span class=\"undefined\">        http.onreadystatechange = () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            if(http.readyState === 4 &amp;&amp; http.status === 200) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                const url = http.responseText;</span></span><br><span class=\"line\"><span class=\"undefined\">                // createAEle(url); // 有些浏览器，动态创建表单也会拦截</span></span><br><span class=\"line\"><span class=\"undefined\">                // windowOpen(url); // 异步回调里调用，浏览器会拦截</span></span><br><span class=\"line\"><span class=\"undefined\">                formDownload(url); // 不拦截</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    function downloadAfterAjax() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        $.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            method: 'GET',</span></span><br><span class=\"line\"><span class=\"undefined\">            url: '/xhr/get/url.json',</span></span><br><span class=\"line\"><span class=\"undefined\">            async: false // 将异步改为同步，浏览器不拦截</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;).done(url =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            windowOpen(url);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    function formDownload(url, params) &#123;// 可以使用post方法，携带大对象参数</span></span><br><span class=\"line\"><span class=\"undefined\">        const body = document.getElementsByTagName('body')[0];</span></span><br><span class=\"line\"><span class=\"undefined\">        const oldIframe = document.getElementById('perfectIframe');</span></span><br><span class=\"line\"><span class=\"undefined\">        const oldForm = document.getElementById('perfectForm');</span></span><br><span class=\"line\"><span class=\"undefined\">        const oldInput = document.getElementById('perfectInput');</span></span><br><span class=\"line\"><span class=\"undefined\">        if (oldIframe &amp;&amp; oldForm &amp;&amp; oldInput) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            oldForm.setAttribute('action', url);</span></span><br><span class=\"line\"><span class=\"undefined\">            oldInput.setAttribute('value', JSON.stringify(params));</span></span><br><span class=\"line\"><span class=\"undefined\">            document.forms['perfectForm'].submit();</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            const iframe = document.createElement('iframe');</span></span><br><span class=\"line\"><span class=\"undefined\">            iframe.setAttribute('name', 'form_target');</span></span><br><span class=\"line\"><span class=\"undefined\">            iframe.setAttribute('id', 'perfectIframe');</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">            const form = document.createElement('form');</span></span><br><span class=\"line\"><span class=\"undefined\">            form.setAttribute('id', 'perfectForm');</span></span><br><span class=\"line\"><span class=\"undefined\">            form.setAttribute('name', 'perfectForm');</span></span><br><span class=\"line\"><span class=\"undefined\">            form.setAttribute('method', 'post');</span></span><br><span class=\"line\"><span class=\"undefined\">            form.setAttribute('action', url);</span></span><br><span class=\"line\"><span class=\"undefined\">            form.setAttribute('target', 'form_target');</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">            const hiddenField = document.createElement('input');</span></span><br><span class=\"line\"><span class=\"undefined\">            hiddenField.setAttribute('id', 'perfectInput');</span></span><br><span class=\"line\"><span class=\"undefined\">            hiddenField.setAttribute('type', 'hidden');</span></span><br><span class=\"line\"><span class=\"undefined\">            hiddenField.setAttribute('name', 'value');</span></span><br><span class=\"line\"><span class=\"undefined\">            hiddenField.setAttribute('value', JSON.stringify(params));</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">            form.appendChild(hiddenField);</span></span><br><span class=\"line\"><span class=\"undefined\">            body.appendChild(form);</span></span><br><span class=\"line\"><span class=\"undefined\">            body.appendChild(iframe);</span></span><br><span class=\"line\"><span class=\"undefined\">            form.submit();</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    async function downloadByFetch() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        const res = await fetch('/xhr/doc/test.pptx');</span></span><br><span class=\"line\"><span class=\"undefined\">        const r = await res.blob();</span></span><br><span class=\"line\"><span class=\"undefined\">        const blob = new Blob([r], &#123;type: \"application/octet-stream\"&#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        const url = window.URL.createObjectURL(blob);</span></span><br><span class=\"line\"><span class=\"undefined\">        createAEle(url, '_target', 'a.pptx');</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>server：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fse = <span class=\"built_in\">require</span>(<span class=\"string\">'fse'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">static</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> opn = <span class=\"built_in\">require</span>(<span class=\"string\">'opn'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-bodyparser'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> returnFile = <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ctx.request.body);<span class=\"comment\">// post 方法提交的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> filePath = <span class=\"built_in\">decodeURI</span>(ctx.path.replace(<span class=\"string\">'/xhr/'</span>, <span class=\"string\">''</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fse.existsSync(path.resolve(filePath))) &#123;</span><br><span class=\"line\">        ctx.set(<span class=\"string\">'Content-disposition'</span>, <span class=\"string\">'attachment; filename=a.pptx'</span>);</span><br><span class=\"line\">        ctx.set(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/vnd.openxmlformats-officedocument.presentationml.presentation; charset=UTF-8'</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(path.resolve(filePath))</span><br><span class=\"line\">        ctx.body = fse.readFileSync(path.resolve(filePath));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置静态资源</span></span><br><span class=\"line\">app.use(<span class=\"keyword\">static</span>(</span><br><span class=\"line\">    path.join(__dirname, <span class=\"string\">'./src'</span>)</span><br><span class=\"line\">))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用ctx.body解析中间件</span></span><br><span class=\"line\">app.use(bodyParser())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/xhr/doc/:name'</span>, returnFile)</span><br><span class=\"line\">router.post(<span class=\"string\">'/xhr/doc/:name'</span>, returnFile)</span><br><span class=\"line\"><span class=\"comment\">// 请求</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/xhr/get/:name'</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    ctx.body = <span class=\"string\">'/xhr/doc/test.pptx'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">router.post(<span class=\"string\">'/xhr/get/:name'</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    ctx.body = <span class=\"string\">'/xhr/doc/test.pptx'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app</span><br><span class=\"line\">    .use(router.routes())</span><br><span class=\"line\">    .use(router.allowedMethods());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">opn(<span class=\"string\">'http://localhost:3001/'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3001</span>);</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>文件下载和页面打印在业务中有很多使用场景，它们的本质是一样的，都是向后端发一个请求，然后后端返回一个文件。浏览器将文件下载下来，（打印的情况，就是返回html文件，文件加载完之后调浏览器的打印）。</p>\n<p>下面主要从文件下载讨论：</p>\n<h2 id=\"使用-a-标签\"><a href=\"#使用-a-标签\" class=\"headerlink\" title=\"使用 a 标签\"></a>使用 a 标签</h2><p>最基础的用法，加 download 属性，浏览器下载该文件。<br>缺点：</p>\n<ul>\n<li>不能使用post方法</li>\n<li>不能在启动下载时禁用按钮、下载完毕启用按钮<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/xhr/doc/ts实践总结&amp;ts解析.pptx\"</span> <span class=\"attr\">download</span>&gt;</span>下载<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"关于-download-重命名\"><a href=\"#关于-download-重命名\" class=\"headerlink\" title=\"关于 download 重命名\"></a>关于 download 重命名</h6><ul>\n<li>download 的值可作为文件的名称</li>\n<li>后端如果对文件命名，那么会使用后端的命名</li>\n<li>在后端没有命名时，以 download 的值为文件名称</li>\n<li>都没命名时，或者 download 值设置为空时，下载的文件用文件本身的名称</li>\n</ul>\n<h2 id=\"window-open\"><a href=\"#window-open\" class=\"headerlink\" title=\"window.open\"></a>window.open</h2><p>缺点：</p>\n<ul>\n<li>异步回调函数里调 window.open 会被浏览器拦截<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 下载方法</span></span><br><span class=\"line\"><span class=\"comment\"> * @param url</span></span><br><span class=\"line\"><span class=\"comment\"> * @param target</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> windowOpen = <span class=\"function\">(<span class=\"params\">url: <span class=\"built_in\">string</span>, target: <span class=\"built_in\">string</span> = '_blank'</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.open(url, target);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"动态创建-a-标签\"><a href=\"#动态创建-a-标签\" class=\"headerlink\" title=\"动态创建 a 标签\"></a>动态创建 a 标签</h2><p>如果在某些业务操作之后再下载的情况，就可以动态创建一个 a 标签。<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 下载方法</span></span><br><span class=\"line\"><span class=\"comment\"> * @param url</span></span><br><span class=\"line\"><span class=\"comment\"> * @param target</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> download = <span class=\"function\">(<span class=\"params\">url: <span class=\"built_in\">string</span>, target: <span class=\"built_in\">string</span> = '_blank', fileNmae: <span class=\"built_in\">string</span> = ''</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">    a.id = <span class=\"string\">`download<span class=\"subst\">$&#123;Date.now()&#125;</span>`</span>;</span><br><span class=\"line\">    a.href = url;</span><br><span class=\"line\">    a.target = target;</span><br><span class=\"line\">    a.download = fileNmae;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> body = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    body.appendChild(a);</span><br><span class=\"line\">    a.click();</span><br><span class=\"line\">    body.removeChild(a);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"iframe-form\"><a href=\"#iframe-form\" class=\"headerlink\" title=\"iframe + form\"></a>iframe + form</h2><ul>\n<li>不管是 a 标签还是 window.open ，在异步回调里都可能会被浏览器拦截（具体看浏览器，因为不是用户发起的页面跳转，有些浏览器会认为不安全）</li>\n<li>或者是下载请求需要带复杂对象参数，需要用 post 方法，可以使用 iframe + form 利用表单的形式带参数。<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 下载方法</span></span><br><span class=\"line\"><span class=\"comment\"> * @param url</span></span><br><span class=\"line\"><span class=\"comment\"> * @param target</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> download = <span class=\"function\">(<span class=\"params\">url: <span class=\"built_in\">string</span>, params: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> body = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldIframe = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'perfectIframe'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldForm = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'perfectForm'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldInput = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'perfectInput'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldIframe &amp;&amp; oldForm &amp;&amp; oldInput) &#123;</span><br><span class=\"line\">        oldForm.setAttribute(<span class=\"string\">'action'</span>, url);</span><br><span class=\"line\">        oldInput.setAttribute(<span class=\"string\">'value'</span>, <span class=\"built_in\">JSON</span>.stringify(params));</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.forms[<span class=\"string\">'perfectForm'</span>].submit();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'iframe'</span>);</span><br><span class=\"line\">        iframe.setAttribute(<span class=\"string\">'name'</span>, <span class=\"string\">'form_target'</span>);</span><br><span class=\"line\">        iframe.setAttribute(<span class=\"string\">'id'</span>, <span class=\"string\">'perfectIframe'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> form = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'form'</span>);</span><br><span class=\"line\">        form.setAttribute(<span class=\"string\">'id'</span>, <span class=\"string\">'perfectForm'</span>);</span><br><span class=\"line\">        form.setAttribute(<span class=\"string\">'name'</span>, <span class=\"string\">'perfectForm'</span>);</span><br><span class=\"line\">        form.setAttribute(<span class=\"string\">'method'</span>, <span class=\"string\">'post'</span>);</span><br><span class=\"line\">        form.setAttribute(<span class=\"string\">'action'</span>, url);</span><br><span class=\"line\">        form.setAttribute(<span class=\"string\">'target'</span>, <span class=\"string\">'form_target'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> hiddenField = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'input'</span>);</span><br><span class=\"line\">        hiddenField.setAttribute(<span class=\"string\">'id'</span>, <span class=\"string\">'perfectInput'</span>);</span><br><span class=\"line\">        hiddenField.setAttribute(<span class=\"string\">'type'</span>, <span class=\"string\">'hidden'</span>);</span><br><span class=\"line\">        hiddenField.setAttribute(<span class=\"string\">'name'</span>, <span class=\"string\">'value'</span>);</span><br><span class=\"line\">        hiddenField.setAttribute(<span class=\"string\">'value'</span>, <span class=\"built_in\">JSON</span>.stringify(params));</span><br><span class=\"line\"></span><br><span class=\"line\">        form.appendChild(hiddenField);</span><br><span class=\"line\">        body.appendChild(form);</span><br><span class=\"line\">        body.appendChild(iframe);</span><br><span class=\"line\">        form.submit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"使用-fetch-完成下载\"><a href=\"#使用-fetch-完成下载\" class=\"headerlink\" title=\"使用 fetch 完成下载\"></a>使用 fetch 完成下载</h2><ul>\n<li>对于 post 请求后端直接返回文件流的情况，可以使用 fetch 下载。</li>\n<li>更多 Fetch 知识请查看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch\" target=\"_blank\" rel=\"noopener\">MDN</a><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 下载方法</span></span><br><span class=\"line\"><span class=\"comment\"> * @param url</span></span><br><span class=\"line\"><span class=\"comment\"> * @param target</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"keyword\">export</span> <span class=\"keyword\">const</span> downloadByFetch() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> fetch(<span class=\"string\">'/xhr/doc/test.pptx'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> r = <span class=\"keyword\">await</span> res.blob();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> blob = <span class=\"keyword\">new</span> Blob([r], &#123;<span class=\"keyword\">type</span>: <span class=\"string\">\"application/octet-stream\"</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = <span class=\"built_in\">window</span>.URL.createObjectURL(blob);</span><br><span class=\"line\">    ... <span class=\"comment\">// 动态创建 a 标签完成</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"DEMO源码\"><a href=\"#DEMO源码\" class=\"headerlink\" title=\"DEMO源码\"></a>DEMO源码</h3><p>html：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1：点击 下载 来下载文件：<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>a 标签 <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/xhr/doc/test.pptx\"</span>&gt;</span>下载<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>window.open 下载 <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"windowOpen('/xhr/doc/test.pptx');\"</span>&gt;</span>下载<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>动态创建 a 标签 <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"createAEle('/xhr/doc/test.pptx');\"</span>&gt;</span>下载<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>异步请求回调里下载 <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"downloadAfterAsync();\"</span>&gt;</span>下载<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>ajax回调里下载 <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"downloadAfterAjax();\"</span>&gt;</span>下载<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>form 表单提交 <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"formDownload('/xhr/doc/test.pptx',&#123;a:1,b:2&#125;);\"</span>&gt;</span>下载<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>使用fetch下载 <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"downloadByFetch();\"</span>&gt;</span>下载<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    function windowOpen(url) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        window.open(url,'_blank');</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    function createAEle(url, target, fileName) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        const a = document.createElement('a');</span></span><br><span class=\"line\"><span class=\"undefined\">        a.id = `download$&#123;Date.now()&#125;`;</span></span><br><span class=\"line\"><span class=\"undefined\">        a.href = url;</span></span><br><span class=\"line\"><span class=\"undefined\">        a.target = target || '_target';</span></span><br><span class=\"line\"><span class=\"undefined\">        a.download = fileName ? fileName : undefined;</span></span><br><span class=\"line\"><span class=\"undefined\">        const body = document.getElementsByTagName('body')[0];</span></span><br><span class=\"line\"><span class=\"undefined\">        body.appendChild(a);</span></span><br><span class=\"line\"><span class=\"undefined\">        a.click();</span></span><br><span class=\"line\"><span class=\"undefined\">        body.removeChild(a);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    function downloadAfterAsync() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        const http = new XMLHttpRequest();</span></span><br><span class=\"line\"><span class=\"undefined\">        http.open('GET','/xhr/get/url.json');</span></span><br><span class=\"line\"><span class=\"undefined\">        http.send();</span></span><br><span class=\"line\"><span class=\"undefined\">        http.onreadystatechange = () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            if(http.readyState === 4 &amp;&amp; http.status === 200) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                const url = http.responseText;</span></span><br><span class=\"line\"><span class=\"undefined\">                // createAEle(url); // 有些浏览器，动态创建表单也会拦截</span></span><br><span class=\"line\"><span class=\"undefined\">                // windowOpen(url); // 异步回调里调用，浏览器会拦截</span></span><br><span class=\"line\"><span class=\"undefined\">                formDownload(url); // 不拦截</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    function downloadAfterAjax() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        $.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            method: 'GET',</span></span><br><span class=\"line\"><span class=\"undefined\">            url: '/xhr/get/url.json',</span></span><br><span class=\"line\"><span class=\"undefined\">            async: false // 将异步改为同步，浏览器不拦截</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;).done(url =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            windowOpen(url);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    function formDownload(url, params) &#123;// 可以使用post方法，携带大对象参数</span></span><br><span class=\"line\"><span class=\"undefined\">        const body = document.getElementsByTagName('body')[0];</span></span><br><span class=\"line\"><span class=\"undefined\">        const oldIframe = document.getElementById('perfectIframe');</span></span><br><span class=\"line\"><span class=\"undefined\">        const oldForm = document.getElementById('perfectForm');</span></span><br><span class=\"line\"><span class=\"undefined\">        const oldInput = document.getElementById('perfectInput');</span></span><br><span class=\"line\"><span class=\"undefined\">        if (oldIframe &amp;&amp; oldForm &amp;&amp; oldInput) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            oldForm.setAttribute('action', url);</span></span><br><span class=\"line\"><span class=\"undefined\">            oldInput.setAttribute('value', JSON.stringify(params));</span></span><br><span class=\"line\"><span class=\"undefined\">            document.forms['perfectForm'].submit();</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            const iframe = document.createElement('iframe');</span></span><br><span class=\"line\"><span class=\"undefined\">            iframe.setAttribute('name', 'form_target');</span></span><br><span class=\"line\"><span class=\"undefined\">            iframe.setAttribute('id', 'perfectIframe');</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">            const form = document.createElement('form');</span></span><br><span class=\"line\"><span class=\"undefined\">            form.setAttribute('id', 'perfectForm');</span></span><br><span class=\"line\"><span class=\"undefined\">            form.setAttribute('name', 'perfectForm');</span></span><br><span class=\"line\"><span class=\"undefined\">            form.setAttribute('method', 'post');</span></span><br><span class=\"line\"><span class=\"undefined\">            form.setAttribute('action', url);</span></span><br><span class=\"line\"><span class=\"undefined\">            form.setAttribute('target', 'form_target');</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">            const hiddenField = document.createElement('input');</span></span><br><span class=\"line\"><span class=\"undefined\">            hiddenField.setAttribute('id', 'perfectInput');</span></span><br><span class=\"line\"><span class=\"undefined\">            hiddenField.setAttribute('type', 'hidden');</span></span><br><span class=\"line\"><span class=\"undefined\">            hiddenField.setAttribute('name', 'value');</span></span><br><span class=\"line\"><span class=\"undefined\">            hiddenField.setAttribute('value', JSON.stringify(params));</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">            form.appendChild(hiddenField);</span></span><br><span class=\"line\"><span class=\"undefined\">            body.appendChild(form);</span></span><br><span class=\"line\"><span class=\"undefined\">            body.appendChild(iframe);</span></span><br><span class=\"line\"><span class=\"undefined\">            form.submit();</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    async function downloadByFetch() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        const res = await fetch('/xhr/doc/test.pptx');</span></span><br><span class=\"line\"><span class=\"undefined\">        const r = await res.blob();</span></span><br><span class=\"line\"><span class=\"undefined\">        const blob = new Blob([r], &#123;type: \"application/octet-stream\"&#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        const url = window.URL.createObjectURL(blob);</span></span><br><span class=\"line\"><span class=\"undefined\">        createAEle(url, '_target', 'a.pptx');</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>server：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fse = <span class=\"built_in\">require</span>(<span class=\"string\">'fse'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">static</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> opn = <span class=\"built_in\">require</span>(<span class=\"string\">'opn'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-bodyparser'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> returnFile = <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ctx.request.body);<span class=\"comment\">// post 方法提交的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> filePath = <span class=\"built_in\">decodeURI</span>(ctx.path.replace(<span class=\"string\">'/xhr/'</span>, <span class=\"string\">''</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fse.existsSync(path.resolve(filePath))) &#123;</span><br><span class=\"line\">        ctx.set(<span class=\"string\">'Content-disposition'</span>, <span class=\"string\">'attachment; filename=a.pptx'</span>);</span><br><span class=\"line\">        ctx.set(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/vnd.openxmlformats-officedocument.presentationml.presentation; charset=UTF-8'</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(path.resolve(filePath))</span><br><span class=\"line\">        ctx.body = fse.readFileSync(path.resolve(filePath));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置静态资源</span></span><br><span class=\"line\">app.use(<span class=\"keyword\">static</span>(</span><br><span class=\"line\">    path.join(__dirname, <span class=\"string\">'./src'</span>)</span><br><span class=\"line\">))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用ctx.body解析中间件</span></span><br><span class=\"line\">app.use(bodyParser())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/xhr/doc/:name'</span>, returnFile)</span><br><span class=\"line\">router.post(<span class=\"string\">'/xhr/doc/:name'</span>, returnFile)</span><br><span class=\"line\"><span class=\"comment\">// 请求</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/xhr/get/:name'</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    ctx.body = <span class=\"string\">'/xhr/doc/test.pptx'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">router.post(<span class=\"string\">'/xhr/get/:name'</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    ctx.body = <span class=\"string\">'/xhr/doc/test.pptx'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app</span><br><span class=\"line\">    .use(router.routes())</span><br><span class=\"line\">    .use(router.allowedMethods());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">opn(<span class=\"string\">'http://localhost:3001/'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3001</span>);</span><br></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjvufkp1m00007h3j18rwnbym","category_id":"cjvufkp1u00027h3jrmkrnivm","_id":"cjvufkp2100087h3jo2n6qjkw"},{"post_id":"cjvufkp1r00017h3jlm38gvv3","category_id":"cjvufkp1u00027h3jrmkrnivm","_id":"cjvufkp22000a7h3jfd63pat7"},{"post_id":"cjvufkp1x00047h3jd8mz4vlh","category_id":"cjvufkp1u00027h3jrmkrnivm","_id":"cjvufkp22000d7h3jlf7vli4h"},{"post_id":"cjvufkp24000j7h3jpu2noiqv","category_id":"cjvufkp1u00027h3jrmkrnivm","_id":"cjvufkp25000l7h3j8mzekxf3"}],"PostTag":[{"post_id":"cjvufkp1m00007h3j18rwnbym","tag_id":"cjvufkp1w00037h3jvv1lg576","_id":"cjvufkp22000c7h3j8fnu2kuk"},{"post_id":"cjvufkp1m00007h3j18rwnbym","tag_id":"cjvufkp1y00067h3jjktlc49f","_id":"cjvufkp22000e7h3jsxlmbd72"},{"post_id":"cjvufkp1m00007h3j18rwnbym","tag_id":"cjvufkp2100097h3jnpr6p631","_id":"cjvufkp23000g7h3j5y11r981"},{"post_id":"cjvufkp1r00017h3jlm38gvv3","tag_id":"cjvufkp22000b7h3j54gm6zaj","_id":"cjvufkp23000h7h3jppd4bubp"},{"post_id":"cjvufkp1x00047h3jd8mz4vlh","tag_id":"cjvufkp22000f7h3j6o87zwmw","_id":"cjvufkp23000i7h3jg3ndwyp3"},{"post_id":"cjvufkp24000j7h3jpu2noiqv","tag_id":"cjvufkp22000f7h3j6o87zwmw","_id":"cjvufkp25000k7h3j4f3tmll0"}],"Tag":[{"name":"html","_id":"cjvufkp1w00037h3jvv1lg576"},{"name":"css","_id":"cjvufkp1y00067h3jjktlc49f"},{"name":"js","_id":"cjvufkp2100097h3jnpr6p631"},{"name":"node","_id":"cjvufkp22000b7h3j54gm6zaj"},{"name":"typescript","_id":"cjvufkp22000f7h3j6o87zwmw"}]}}