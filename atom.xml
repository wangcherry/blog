<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小英英的博客</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://wangcherry.github.io/blog/"/>
  <updated>2019-09-25T15:12:39.960Z</updated>
  <id>https://wangcherry.github.io/blog/</id>
  
  <author>
    <name>小英英</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nodejs开发CLI工具</title>
    <link href="https://wangcherry.github.io/blog/2019/09/25/nodejs%E5%BC%80%E5%8F%91CLI%E5%B7%A5%E5%85%B7/"/>
    <id>https://wangcherry.github.io/blog/2019/09/25/nodejs开发CLI工具/</id>
    <published>2019-09-25T01:34:34.000Z</published>
    <updated>2019-09-25T15:12:39.960Z</updated>
    
    <content type="html"><![CDATA[<p>在没有@vue/cli、create-react-app、@angular/cli这样子的脚手架时你是否遇到过一个文件一个文件的去拷贝老项目的配置文件？在开始使用脚手架后是否发现当前的脚手架不能完全贴合实际的业务场景？最近，我们组由angular框架转换成react框架，开发了一套完整的cli工具。写下这篇文章作为一个记录，希望大家看到后都能实现一个属于自己的脚手架工具。</p><p>CLI（command-line interface，命令行界面）是指可在用户提示符下键入可执行指令的界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>主要分为以下几步：</p><ul><li>新建一个项目并初始化package.json</li><li>开发前准备</li><li>获取参数</li></ul><h3 id="新建一个项目并初始化package-json"><a href="#新建一个项目并初始化package-json" class="headerlink" title="新建一个项目并初始化package.json"></a>新建一个项目并初始化package.json</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir cli &amp; cd cli</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><p>在package.json里配置命令，bin项用来指定各个内部命令对应的可执行文件的位置。这里 <strong>sr</strong> 就是我的命令了<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"bin": &#123;</span><br><span class="line">  "sr": "./bin/index.js"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="开发前准备"><a href="#开发前准备" class="headerlink" title="开发前准备"></a>开发前准备</h3><p>在bin文件夹下创建一个index.js</p><p>./bin/index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'my cli！'</span>);</span><br></pre></td></tr></table></figure></p><p>将命令链接到全局：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm link</span><br></pre></td></tr></table></figure></p><p>执行命令后，my-cli会根据package.json上的配置，<strong>sr</strong> 命令被链接到全局。<a href="https://docs.npmjs.com/cli/link" target="_blank" rel="noopener">更多npm link知识</a></p><p><img src="http://mailshark.nos-jd.163yun.com/document/static/A77FE816820FE0772924C4959AD1C58D.png" alt=""></p><p>这时在任何目录执行 <strong>sr</strong> 将会看到：</p><p><img src="http://mailshark.nos-jd.163yun.com/document/static/F5E934A2E47C6E0DD6EB812ABE66DF27.png" alt=""></p><p>到这里就可以开始开发 cli 了，./bin/index.js 的更改会实时同步到全局命令的。</p><h3 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h3><p>有了命令，那么具体子命令怎么执行呢？例如我输入 <strong>sr info</strong> 时希望能打印当前环境信息。效果如下：</p><p><img src="http://mailshark.nos-jd.163yun.com/document/static/155BDFD1FE854AECEC21D1BB7CFF0EF7.png" alt=""></p><p>首先，我们需要获取参数，因为知道是 info 命令，才能执行打印环境信息操作。那么怎么获取命令行参数呢？下面介绍用原始方法和使用模块获取命令行参数：</p><h4 id="原始方法获取命令参数"><a href="#原始方法获取命令参数" class="headerlink" title="原始方法获取命令参数"></a>原始方法获取命令参数</h4><p>命令行参数可以用系统变量 process.argv 获取。（打印当前环境信息用 <a href="https://www.npmjs.com/package/envinfo" target="_blank" rel="noopener">envinfo</a>）</p><p>./bin/index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> envinfo = <span class="built_in">require</span>(<span class="string">'envinfo'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(process.argv[<span class="number">2</span>] === <span class="string">'info'</span> ) &#123;</span><br><span class="line">    envinfo</span><br><span class="line">      .run(</span><br><span class="line">        &#123;</span><br><span class="line">          System: [<span class="string">'OS'</span>, <span class="string">'CPU'</span>],</span><br><span class="line">          Binaries: [<span class="string">'Node'</span>, <span class="string">'Yarn'</span>, <span class="string">'npm'</span>],</span><br><span class="line">          Browsers: [<span class="string">'Chrome'</span>, <span class="string">'Edge'</span>, <span class="string">'Firefox'</span>, <span class="string">'Safari'</span>],</span><br><span class="line">          npmPackages: [<span class="string">'envinfo'</span>],</span><br><span class="line">          npmGlobalPackages: [<span class="string">'@sharkr/cli'</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          showNotFound: <span class="literal">true</span>,</span><br><span class="line">          duplicates: <span class="literal">true</span>,</span><br><span class="line">          fullTree: <span class="literal">true</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">      .then(<span class="built_in">console</span>.log);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'my cli！'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="使用模块commander获取命令参数"><a href="#使用模块commander获取命令参数" class="headerlink" title="使用模块commander获取命令参数"></a>使用模块commander获取命令参数</h4><p><a href="https://www.npmjs.com/package/commander" target="_blank" rel="noopener">commander</a>这个模块是node.js命令行界面的完整解决方案，不仅有着强大的参数解析功能，还提供了用户命令行输入，是cli开发的一个很好选择。</p><p>./bin/index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> envinfo = <span class="built_in">require</span>(<span class="string">'envinfo'</span>);</span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .version(<span class="built_in">require</span>(<span class="string">'../package'</span>).version)</span><br><span class="line">  .usage(<span class="string">'&lt;command&gt; [options]'</span>);</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .command(<span class="string">'info'</span>)</span><br><span class="line">  .description(<span class="string">'Print debugging information about your environment'</span>)</span><br><span class="line">  .option(<span class="string">'-s, --show-not-found'</span>, <span class="string">'show not found package'</span>)</span><br><span class="line">  .action(<span class="function">(<span class="params">cmd</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> options = cleanArgs(cmd);</span><br><span class="line">    <span class="built_in">console</span>.log(options)</span><br><span class="line">    envinfo</span><br><span class="line">      .run(</span><br><span class="line">        &#123;</span><br><span class="line">          System: [<span class="string">'OS'</span>, <span class="string">'CPU'</span>],</span><br><span class="line">          Binaries: [<span class="string">'Node'</span>, <span class="string">'Yarn'</span>, <span class="string">'npm'</span>],</span><br><span class="line">          Browsers: [<span class="string">'Chrome'</span>, <span class="string">'Edge'</span>, <span class="string">'Firefox'</span>, <span class="string">'Safari'</span>],</span><br><span class="line">          npmPackages: [<span class="string">'envinfo'</span>],</span><br><span class="line">          npmGlobalPackages: [<span class="string">'@sharkr/cli'</span>, <span class="string">'xxx'</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          showNotFound: options.showNotFound,</span><br><span class="line">          duplicates: <span class="literal">true</span>,</span><br><span class="line">          fullTree: <span class="literal">true</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">      .then(<span class="built_in">console</span>.log);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">program.parse(process.argv);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">camelize</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/-(\w)/g</span>, (_, c) =&gt; (c ? c.toUpperCase() : <span class="string">''</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cleanArgs</span>(<span class="params">cmd</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> args = &#123;&#125;;</span><br><span class="line">  cmd.options.forEach(<span class="function"><span class="params">o</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> key = camelize(o.long.replace(<span class="regexp">/^--/</span>, <span class="string">''</span>));</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> cmd[key] !== <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> cmd[key] !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      args[key] = cmd[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>command：子命令</li><li>description：命令描述</li><li>option：配置项</li><li>action：命令对应要执行的方法</li><li>cleanArgs 函数将 option 处理成键值对，方便使用</li><li>program.parse(process.argv) 解析命令参数</li></ul><h2 id="init命令"><a href="#init命令" class="headerlink" title="init命令"></a>init命令</h2><p>经过上面的准备工作，cli 已经可以获取命令和参数了，那么接下来就可以开始写命令对应的操作了。作为项目的脚手架，第一步当然是初始化一个项目。分为以下两步完成：</p><ul><li>准备模板</li><li>编写init命令</li></ul><h3 id="准备模板"><a href="#准备模板" class="headerlink" title="准备模板"></a>准备模板</h3><p>我们的模板都放在 gitlab 维护，init 时从 gitlab clone，这么做主要是考虑到我们模板比较多，且前期模板不稳定，避免模板更新时需要频繁更新 cli。多个模板可以通过配置项来选择。</p><h3 id="编写init命令"><a href="#编写init命令" class="headerlink" title="编写init命令"></a>编写init命令</h3><p>以下是省去很多校验和兼容处理的一个init命令<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">program</span><br><span class="line">  .command(<span class="string">'init &lt;app-name&gt;'</span>)</span><br><span class="line">  .description(<span class="string">'Init a new react project'</span>)</span><br><span class="line">  .option(<span class="string">'-t, --type &lt;type&gt;'</span>, <span class="string">'Set template type'</span>)</span><br><span class="line">  .option(<span class="string">'-y, --useYarn'</span>, <span class="string">'Use yarn install (default use npm)'</span>)</span><br><span class="line">  .action(<span class="keyword">async</span> (appName, cmd) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> options = cleanArgs(cmd);</span><br><span class="line">    <span class="comment">// 获取代码前可以进行一些特性对话</span></span><br><span class="line">    <span class="keyword">let</span> templateGit;</span><br><span class="line">    <span class="keyword">if</span> (options.type) &#123;</span><br><span class="line">      <span class="comment">// 虚构的git模板地址</span></span><br><span class="line">      templateGit = <span class="string">`git@github.com:sharkr/react-template/<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">        options.type</span></span></span><br><span class="line"><span class="string"><span class="subst">      &#125;</span>.git`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; type &#125; = <span class="keyword">await</span> inquirer.prompt([</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'type'</span>,</span><br><span class="line">          type: <span class="string">'list'</span>,</span><br><span class="line">          message: <span class="string">`Select template type:`</span>,</span><br><span class="line">          choices: [</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">'full, include server &amp; web'</span>, <span class="attr">value</span>: <span class="string">'full'</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">'web, only web template'</span>, <span class="attr">value</span>: <span class="string">'web'</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">'npm, include server &amp; web for package'</span>, <span class="attr">value</span>: <span class="string">'npm'</span> &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="keyword">default</span>: <span class="string">'full'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ]);</span><br><span class="line">      <span class="comment">// 虚构的git模板地址</span></span><br><span class="line">      templateGit = <span class="string">`git@github.com:sharkr/react-template/<span class="subst">$&#123;type&#125;</span>.git`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// clone代码</span></span><br><span class="line">    execSync(<span class="string">`git clone <span class="subst">$&#123;templateGit&#125;</span> <span class="subst">$&#123;appName&#125;</span>`</span>, &#123; <span class="attr">stdio</span>: <span class="string">'ignore'</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> appPath = path.resolve(appName);</span><br><span class="line">    process.chdir(appPath);</span><br><span class="line">    fse.removeSync(path.join(appPath, <span class="string">'.git'</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里可以对模板做一下处理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据配置项install</span></span><br><span class="line">    <span class="keyword">if</span>(options.useYarn) &#123;</span><br><span class="line">      spawn(<span class="string">'yarn'</span>, [<span class="string">'install'</span>], &#123; <span class="attr">stdio</span>: <span class="string">'inherit'</span> &#125;);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      spawn(<span class="string">'npm'</span>, [<span class="string">'install'</span>], &#123; <span class="attr">stdio</span>: <span class="string">'inherit'</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>执行 <strong>sr init my-app</strong></p><p><img src="http://mailshark.nos-jd.163yun.com/document/static/09F7F96889D31DAE9F9DB645D16C5292.gif" alt=""></p><p>init 命令提供一个配置项 type 设置需要拉取的模板类型，我们可以执行 <strong>sr init my-app</strong> 初始化项目，没设置 type 时需要选择模板类型。执行 <strong>sr init my-app -t full</strong> 时直接拉取full模板。<br>在实际开发中，可以根据模板的用途做更多的特性选择和处理。</p><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><p>在命令行工具的开发过程中，使用commander、inquirer和chalk等一些npm插件，可以很好的完成命令行工具的开发，并且可以达到很棒的效果，感兴趣的话，赶快试试吧，做一款自己的命令行工具。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在没有@vue/cli、create-react-app、@angular/cli这样子的脚手架时你是否遇到过一个文件一个文件的去拷贝老项目的配置文件？在开始使用脚手架后是否发现当前的脚手架不能完全贴合实际的业务场景？最近，我们组由angular框架转换成react框架，开
      
    
    </summary>
    
      <category term="前端" scheme="https://wangcherry.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="node" scheme="https://wangcherry.github.io/blog/tags/node/"/>
    
      <category term="cli" scheme="https://wangcherry.github.io/blog/tags/cli/"/>
    
  </entry>
  
  <entry>
    <title>nodejs实现http和https代理服务</title>
    <link href="https://wangcherry.github.io/blog/2019/04/30/nodejs%E5%AE%9E%E7%8E%B0http%E5%92%8Chttps%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/"/>
    <id>https://wangcherry.github.io/blog/2019/04/30/nodejs实现http和https代理服务/</id>
    <published>2019-04-30T02:22:55.000Z</published>
    <updated>2019-09-25T14:34:58.955Z</updated>
    
    <content type="html"><![CDATA[<h2 id="http-https协议"><a href="#http-https协议" class="headerlink" title="http/https协议"></a>http/https协议</h2><p>作为一个程序员，我们经常会使用到代理，例如将本地请求转到测试环境以完成联调；或将某些请求转发到指定服务器等。那么代理转发的实现原理是什么呢？下面将介绍nodejs如何实现http和https代理服务。</p><p>关于HTTP和HTTPS协议：</p><p>HTTP(Hypertext Transfer Protocol，超文本传输协议) 在OSI七层模型属于应用层协议，在网络与传输层使用可靠的数据传输协议TCP/IP，HTTP协议采用明文传输信息的方式。</p><p>HTTPS (Secure Hypertext Transfer Protocol，安全超文本传输协议）是一个安全通信通道，基于HTTP开发，用于在客户端和服务器之间交换信息时采用安全套接字层(SSL)进行信息交换。通俗地讲，HTTPS是HTTP的安全版，即使用了TLS/SSL加密的HTTP协议。</p><h2 id="http-https代理原理"><a href="#http-https代理原理" class="headerlink" title="http/https代理原理"></a>http/https代理原理</h2><p>下面主要介绍两种代理实现，一种是“中间人”代理（《http权威指南》第六章），还有一种是隧道代理（《http权威指南》第八章）</p><h3 id="“中间人”代理"><a href="#“中间人”代理" class="headerlink" title="“中间人”代理"></a>“中间人”代理</h3><p>MITM（中间人）代理在实际开发和测试中经常会使用。调试接口、查看HTTP请求与响应时使用的http抓包调试工具如：Fiddler、 Charles，就是基于该原理实现的。用户通过设置代理，网络请求就会通过中间人代理，再发往正式服务器。</p><p>所以我们的实现原理就是<strong>建立一个可以同时与客户端和服务端进行通信的网络服务</strong>。</p><p>中间人代理示意图（来源于《HTTP权威指南》）：</p><p><img src="http://mailshark.nos-jd.163yun.com/document/static/5B345D71EFA7AF8C3DDA5B4FE5434BD7.webp" alt=""></p><p>HTTP客户端会向代理发送请求报文，代理服务器必须像Web服务器一样，正确的处理请求和连接，然后返回响应。同时，代理自身要向服务器发送请求，这样，其行为就必须像正确的HTTP客户端一样，要发送请求并接受响应。</p><p>那么http代理的实现方案就是：</p><p><img src="http://mailshark.nos-jd.163yun.com/document/static/2B7C00F90320601594FCD623CF6A4B8C.jpg" alt=""></p><p>此时的代理就是“中间人”，代理拦截到请求之后可以修改请求数据，再向服务器发起请求，获取到数据后也可以修改数据，再返回给客户端。当然，代理也可以不向服务器发起请求，而是直接返回本地的数据，那就是数据mock。</p><p>用node运行下面代码（注意需要设置开启代理）<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> u = url.parse(req.url);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> options = &#123;</span><br><span class="line">        hostname : u.hostname, </span><br><span class="line">        port     : u.port || <span class="number">80</span>,</span><br><span class="line">        path     : u.path,</span><br><span class="line">        method   : req.method,</span><br><span class="line">        headers  : req.headers</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> proxyReq = http.request(options, <span class="function"><span class="keyword">function</span>(<span class="params">proxyRes</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'http proxy：'</span> + options.hostname);</span><br><span class="line">        res.writeHead(proxyRes.statusCode, proxyRes.headers);</span><br><span class="line">        proxyRes.pipe(res);</span><br><span class="line">    &#125;).on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        res.end();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    req.pipe(proxyReq);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = http.createServer(request);</span><br><span class="line"></span><br><span class="line">proxy.listen(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure></p><h3 id="隧道代理"><a href="#隧道代理" class="headerlink" title="隧道代理"></a>隧道代理</h3><p>上面已经完成了HTTP代理，那么是不是将HTTP换成HTTPS就能实现HTTPS代理呢？答案是不能，首先我们来看下HTTP和HTTPS去区别：</p><p><img src="http://mailshark.nos-jd.163yun.com/document/static/8F1DCA29F7FB5FE337DDFA83B6471964.jpg" alt=""></p><p>从上图可以知道HTTPS的分层是在传输层之上建立了安全层，所有的HTTP请求都在安全层上传输。所以对于http代理，我们只需要拦截请求，就可获取到报文信息从而完成转发。但是对于https请求，我们无法获取安全层数据。更多SSL/TLS协议知识可以参考<a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html" target="_blank" rel="noopener">SSL/TLS协议运行机制的概述</a></p><p>那么我们如何转发HTTPS流量呢。方法就是在客户端和服务器之间建立一条Web隧道。Web隧道用HTTP的CONNECT方法建立起来的。</p><p>CONNECT方法请求隧道网关创建一条到达任意目的服务器和端口的TCP连接，并对客户端和服务器之间的后继数据进行盲转发。这种方法不仅能代理HTTPS请求，理论上可以代理所有基于TCP协议的请求。不过HTTP流量代理会耗费一次TCP连接，所以默认HTTP流量不走隧道代理。</p><p>下图显示了CONNECT方法如何建立一条到达网关的隧道（来源于《HTTP权威指南》）：</p><p><img src="http://mailshark.nos-jd.163yun.com/document/static/8D7EDB84587FE23E1CB02664AE71A948.webp" alt=""></p><p>那么隧道代理的实现方案就是：</p><p><img src="http://mailshark.nos-jd.163yun.com/document/static/65715FEE17BEE76A566731B117BB29D1.jpg" alt=""></p><p>第一步：客户端像http代理发起CONNECT请求。<br>第二步：http代理接收到CONNECT请求后与abc.com的433端口建立tcp连接。<br>第三步：与abc.com的433端口建立tcp连接成功，通知客户端。</p><p>隧道连接示例代码：<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span> &#125;);</span><br><span class="line">    res.end(<span class="string">'响应内容'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params">req, cltSocket, head</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'TCP连接已完成'</span>);</span><br><span class="line">    <span class="comment">// 连接到原始服务器。</span></span><br><span class="line">    <span class="keyword">const</span> srvUrl = url.parse(<span class="string">`http://<span class="subst">$&#123;req.url&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">const</span> srvSocket = net.connect(srvUrl.port, srvUrl.hostname, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        cltSocket.write(<span class="string">'HTTP/1.1 200 Connection Established\r\n'</span> +</span><br><span class="line">            <span class="string">'Proxy-agent: Node.js-Proxy\r\n'</span> +</span><br><span class="line">            <span class="string">'\r\n'</span>);</span><br><span class="line">        srvSocket.write(head);</span><br><span class="line">        srvSocket.pipe(cltSocket);</span><br><span class="line">        cltSocket.pipe(srvSocket);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 HTTP 隧道代理。</span></span><br><span class="line"><span class="keyword">const</span> proxy = http.createServer(request);</span><br><span class="line">proxy.on(<span class="string">'connect'</span>, connect);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理正在运行。</span></span><br><span class="line">proxy.listen(<span class="number">8888</span>, <span class="string">'127.0.0.1'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向隧道代理发出请求。</span></span><br><span class="line">    <span class="keyword">const</span> options = &#123;</span><br><span class="line">        port: <span class="number">8888</span>,</span><br><span class="line">        host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        method: <span class="string">'CONNECT'</span>,</span><br><span class="line">        path: <span class="string">'nodejs.cn:80'</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> req = http.request(options);</span><br><span class="line">    req.end();</span><br><span class="line"></span><br><span class="line">    req.on(<span class="string">'connect'</span>, <span class="function">(<span class="params">res, socket, head</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'已连接'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过 HTTP 隧道发出请求。</span></span><br><span class="line">        socket.write(<span class="string">'GET / HTTP/1.1\r\n'</span> +</span><br><span class="line">            <span class="string">'Host: nodejs.cn:80\r\n'</span> +</span><br><span class="line">            <span class="string">'Connection: close\r\n'</span> +</span><br><span class="line">            <span class="string">'\r\n'</span>);</span><br><span class="line">        socket.on(<span class="string">'data'</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(chunk.toString());</span><br><span class="line">        &#125;);</span><br><span class="line">        socket.on(<span class="string">'end'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            proxy.close();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="解析HTTPS请求明文信息"><a href="#解析HTTPS请求明文信息" class="headerlink" title="解析HTTPS请求明文信息"></a>解析HTTPS请求明文信息</h3><p>如果我们需要将请求转发到指定目标服务器，那么就需要解析HTTPS的请求报文了。我们都知道SSL的三大功能：内容加密、身份验证和校验机制，校验机制依赖于 MAC（Message authentication code）校验机制，下面主要谈一下身份验证和内容加密。</p><p>首先，我们需要支持身份认证，才能建立安全连接，身份认证依赖于证书认证机制。域名证书 是每个支持HTTPS网站都需要有的一份证书，用于客户端验证该网站的安全性，而该证书通常是通过安全机构申请的，这个机构就是 CA（Certificate Authority，证书颁发机构）。在每台用户计算机的操作系统或浏览器中，都会维护一份受信任的CA列表，浏览器在获取到域名证书之后，会向CA根证书进行验证，包含在列表之中的证书，或者由列表中的证书签发的证书都会被客户端信任，如果验证通过则能正常收发请求。</p><p>客户端验证服务器证书示意图：</p><p><img src="http://mailshark.nos-jd.163yun.com/document/static/0C79160D00CC86678172657A77CDC566.jpg" alt=""></p><p>由于代理服务器并没有合法的域名证书（证书只存在真实目标服务器，无法获取到），所以我们需要在代理服务器上伪造证书，实现方案是，node生成根证书，安装并信任，在拦截到https请求时，我们利用根证书动态签发域名证书，并将证书返回给浏览器，浏览器验证证书，由于域名证书是我们信任的根证书签发的，所以会验证通过。</p><p>生成根证书：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out private.pem 2048</span><br><span class="line">openssl req -new -x509 -key private.pem -out public.crt -days 99999</span><br></pre></td></tr></table></figure></p><p>注意运行第二条信息时，需要填写一些证书信息，我们是本地测试，Common Name 可以填写127.0.0.1。然后安装并信任即可（安装信任证书请自行百度）</p><p>最后，我们来看下代理服务器如何解析HTTPS请求报文。我们知道，SSL的内容加密功能依赖于密钥协商机制，</p><p>报文信息加密解密示意图（简化版）：</p><p><img src="http://mailshark.nos-jd.163yun.com/document/static/27FC7C77CBEC7A774610F33BBBD7DDA4.jpg" alt=""></p><p>1，建立连接时，客户端发起请求；代理拦截后生成域名证书B和私钥b，并用私钥b给证书B签名；同时，代理跟服务器建立连接；服务器用私钥a给证书A签名，并返回给代理；代理将证书B返回给客户端。随后客户端随机生成主密钥M，并用证书B加密，由主密钥生成会话密钥Q；代理拦截后用私钥b解密获得主密钥M，并随机生成主密钥N，用证书A加密发往服务器，并由主密钥生成会话密钥P；服务器解密获得主密钥N。<br>2，完成连接后，客户端用会话密钥Q加密请求；代理拦截后解密获得明文信息，再用会话密钥P加密发往服务器；服务器解密获得明文信息，返回数据；</p><p>到此，我们的代理就能解析HTTPS请求的明文信息了，也可以修改信息后发往目标服务器，从而实现HTTPS代理。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>代理服务器可以实现各种时髦且有用的功能。它们可以改善安全性，提高性能，节省费用。代理服务器可以看到并接触到所有流过的HTTP流量，所以代理服务器可以监视流量并对其进行修改，以实现很多有用的增值Web服务。希望以上的原理介绍可以帮助到大家更好的理解代理服务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;http-https协议&quot;&gt;&lt;a href=&quot;#http-https协议&quot; class=&quot;headerlink&quot; title=&quot;http/https协议&quot;&gt;&lt;/a&gt;http/https协议&lt;/h2&gt;&lt;p&gt;作为一个程序员，我们经常会使用到代理，例如将本地请求转到测试
      
    
    </summary>
    
      <category term="前端" scheme="https://wangcherry.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="node" scheme="https://wangcherry.github.io/blog/tags/node/"/>
    
      <category term="http" scheme="https://wangcherry.github.io/blog/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>barrel文件引起循环依赖</title>
    <link href="https://wangcherry.github.io/blog/2019/04/08/barrel%E6%96%87%E4%BB%B6%E5%BC%95%E8%B5%B7%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/"/>
    <id>https://wangcherry.github.io/blog/2019/04/08/barrel文件引起循环依赖/</id>
    <published>2019-04-08T06:07:48.000Z</published>
    <updated>2019-04-09T02:31:26.871Z</updated>
    
    <content type="html"><![CDATA[<p>在给QDC项目升级时，碰到这样一个报错。server没问题，build时报错</p><p><img src="http://mailshark.nos-jd.163yun.com/document/static/4054E39044072326F310B61AA0D366CA.jpg" alt=""></p><p>没有报具体错误，按照报错翻译应该是“遇到未定义的provider，通常意味着有一个循环依赖，可能是由于使用“barrel” index.ts 文件引起的”。<br>于是我检查项目中的 provider 使用没有问题，检查了各个模块之间的依赖也没有问题，注意到项目中写了很多index.ts文件，咋一看没有什么问题，比较难发现，但是仔细看index的引用发现barrel使用时有些坑需要注意。</p><h3 id="Barrel"><a href="#Barrel" class="headerlink" title="Barrel"></a>Barrel</h3><p>先介绍一下Barrel，barrel是将多个模块的导出汇总到一个模块的一种方法。barrel本身是一个模块文件，可以重新导出其他模块的选定导出。</p><p>例如有三个模块<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// heroes/hero.component.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HeroComponent &#123;&#125;</span><br><span class="line"><span class="comment">// heroes/hero.model.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Hero &#123;&#125;</span><br><span class="line"><span class="comment">// heroes/hero.service.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HeroService &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./hero.model.ts'</span>;   <span class="comment">// re-export all of its exports</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./hero.service.ts'</span>; <span class="comment">// re-export all of its exports</span></span><br><span class="line"><span class="keyword">export</span> &#123; HeroComponent &#125; <span class="keyword">from</span> <span class="string">'./hero.component.ts'</span>; <span class="comment">// re-export the named thing</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// used barrel</span></span><br><span class="line"><span class="keyword">import</span> &#123; Hero, HeroService &#125; <span class="keyword">from</span> <span class="string">'../heroes'</span>; <span class="comment">// index is implied</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// without barrel</span></span><br><span class="line"><span class="keyword">export</span> &#123; Hero &#125; <span class="keyword">from</span> <span class="string">'../heroes/hero.model.ts'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; HeroService &#125; <span class="keyword">from</span> <span class="string">'../heroes/hero.service.ts'</span>;</span><br></pre></td></tr></table></figure></p><h3 id="Barrel的坑"><a href="#Barrel的坑" class="headerlink" title="Barrel的坑"></a>Barrel的坑</h3><p>在导入同一个模块中的文件时使用barrel可以让文件看起来更清爽，但是在使用时需要注意，因为使用不当可能会引起循环依赖。在这个DQC这个项目中，依赖了@datapi/dscomponent这个包，包在本地打包没问题，但是发成npm包被项目引用后，项目打包就报上面的错误。我简化下，还原报错原因。</p><p>目录结构：<br>|—service<br>|—|—a.service.ts<br>|—|—b.service.ts<br>|—|—index.ts<br>|—table<br>|—|—…<br>|—|—table.module.ts</p><p>例如如下使用<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.service.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AService &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./a.service.ts'</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./b.service.ts'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// table.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; AService &#125; <span class="keyword">from</span> <span class="string">'../service'</span>;</span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">    ...</span><br><span class="line">    providers: [AService]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TableModule &#123; &#125;</span><br></pre></td></tr></table></figure></p><p><code>import { AService } from &#39;../service&#39;;</code> 改为 <code>import { AService } from &#39;../service/a.service.ts&#39;;</code> 后问题得到解决</p><h3 id="angular风格指南"><a href="#angular风格指南" class="headerlink" title="angular风格指南"></a>angular风格指南</h3><p>angular团队已经不推荐barrel这种写法，在风格指南已经删除相关写法。</p><p>所以删除项目中的barrel，改为具体文件导入。</p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://stackoverflow.com/questions/37997824/angular-di-error-exception-cant-resolve-all-parameters#comment80108487_37997824" target="_blank" rel="noopener">Angular DI Error - EXCEPTION: Can’t resolve all parameters</a><br><a href="https://github.com/angular/angular-cli/issues/7369" target="_blank" rel="noopener">Barrel and Circular dependency</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在给QDC项目升级时，碰到这样一个报错。server没问题，build时报错&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mailshark.nos-jd.163yun.com/document/static/4054E39044072326F310B61AA0D366
      
    
    </summary>
    
      <category term="前端" scheme="https://wangcherry.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="typescript" scheme="https://wangcherry.github.io/blog/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>表格固定表头和固定列</title>
    <link href="https://wangcherry.github.io/blog/2019/01/12/%E8%A1%A8%E6%A0%BC%E5%9B%BA%E5%AE%9A%E8%A1%A8%E5%A4%B4%E5%92%8C%E5%9B%BA%E5%AE%9A%E5%88%97/"/>
    <id>https://wangcherry.github.io/blog/2019/01/12/表格固定表头和固定列/</id>
    <published>2019-01-12T08:26:52.000Z</published>
    <updated>2019-01-15T01:47:31.611Z</updated>
    
    <content type="html"><![CDATA[<p>平时业务中经常会碰到固定表头或者固定列的需求，对于只固定表头或者固定列的情况可以使用两个表格，利用css实现。但是对于需要同时固定表头和列的情况，就需要四个表格完成样式，js监听滚动事件。如果表格数据比较多，样式复杂，性能就会受影响，效果不是很理想。那么，我们还有其他方式实现同时固定表头和列吗？</p><p>答案是，yes</p><p>接下来给大家介绍下 position: sticky; 这个属性</p><h2 id="position属性"><a href="#position属性" class="headerlink" title="position属性"></a>position属性</h2><p>CSS position属性用于指定一个元素在文档中的定位方式。top，right，bottom 和 left 属性则决定了该元素的最终位置。<br>position 常用值有：</p><ul><li>absolute（生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。）</li><li>relative（生成相对定位的元素，相对于其正常位置进行定位。）</li><li>fixed（生成固定定位的元素，相对于浏览器窗口进行定位。）</li><li>sticky（生成粘性定位元素）</li></ul><p>下面我们主要介绍的是粘性定位</p><h2 id="粘性定位"><a href="#粘性定位" class="headerlink" title="粘性定位"></a>粘性定位</h2><p>属性为 position: sticky 的元素是粘性定位元素。</p><p>粘性定位可以被认为是相对定位和固定定位的混合。元素在跨越特定阈值前为相对定位，之后为固定定位。举个栗子：</p><p>git效果图：</p><p><img src="https://yanxuan.nosdn.127.net/256ba3567699a9e07d40209c60e7a25c.gif" alt=""></p><p>dt元素在到达顶部之前为相对定位，当元素的top为0之后，就固定在顶部。</p><p><a href="https://codepen.io/wangcherry/pen/rooJEV" target="_blank" rel="noopener">查看源码</a></p><h2 id="position-sticky-实现表格固定表头和列"><a href="#position-sticky-实现表格固定表头和列" class="headerlink" title="position: sticky; 实现表格固定表头和列"></a>position: sticky; 实现表格固定表头和列</h2><p>一个表格轻松搞定表头和列固定</p><p>gif效果图：</p><p><img src="https://yanxuan.nosdn.127.net/190e03363b77c9c9a8f5c91169b70fa0.gif" alt=""></p><p><a href="https://codepen.io/wangcherry/pen/PXXRqd" target="_blank" rel="noopener">查看源码</a></p><p>需要注意：</p><ul><li>该粘性定位元素并不脱离文档流，仍然保留元素原本在文档流中的位置。</li><li>当元素在容器中被滚动超过指定的偏移值时，元素在容器内固定在指定位置。亦即如果你设置了top: 50px，那么在sticky元素到达距离相对定位的元素顶部50px的位置时固定，不再向上移动。</li><li>元素固定的相对偏移是相对于离它最近的具有滚动框的祖先元素，如果祖先元素都不可以滚动，那么是相对于viewport来计算元素的偏移量</li><li>须指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。并且 top 和 bottom 同时设置时，top 生效的优先级高，left 和 right 同时设置时，left 的优先级高。</li></ul><p>兼容性：</p><ul><li>这个属性的兼容性还不是很好，目前仍是一个试验性的属性，并不是W3C推荐的标准。<a href="https://caniuse.com/#search=position%3Asticky" target="_blank" rel="noopener">查看兼容性</a><br><img src="https://yanxuan.nosdn.127.net/e68f0b5f9ed7b0932320e516d4b8d9c9.png" alt=""></li></ul><h2 id="js实现表格固定表头和列"><a href="#js实现表格固定表头和列" class="headerlink" title="js实现表格固定表头和列"></a>js实现表格固定表头和列</h2><p>对兼容性要求高时可以考虑用js监听滚动实现固定</p><p>gif效果图：</p><p><img src="https://yanxuan.nosdn.127.net/83e278cbe3a7df608d7795869b941499.gif" alt=""></p><p><a href="https://codepen.io/wangcherry/pen/PXXRZd" target="_blank" rel="noopener">查看源码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;平时业务中经常会碰到固定表头或者固定列的需求，对于只固定表头或者固定列的情况可以使用两个表格，利用css实现。但是对于需要同时固定表头和列的情况，就需要四个表格完成样式，js监听滚动事件。如果表格数据比较多，样式复杂，性能就会受影响，效果不是很理想。那么，我们还有其他方式实
      
    
    </summary>
    
      <category term="前端" scheme="https://wangcherry.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="https://wangcherry.github.io/blog/tags/html/"/>
    
      <category term="css" scheme="https://wangcherry.github.io/blog/tags/css/"/>
    
      <category term="js" scheme="https://wangcherry.github.io/blog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>文件下载和页面打印</title>
    <link href="https://wangcherry.github.io/blog/2018/12/27/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%92%8C%E9%A1%B5%E9%9D%A2%E6%89%93%E5%8D%B0/"/>
    <id>https://wangcherry.github.io/blog/2018/12/27/文件下载和页面打印/</id>
    <published>2018-12-27T05:58:10.000Z</published>
    <updated>2019-03-04T07:04:30.190Z</updated>
    
    <content type="html"><![CDATA[<p>文件下载和页面打印在业务中有很多使用场景，它们的本质是一样的，都是向后端发一个请求，然后后端返回一个文件。浏览器将文件下载下来，（打印的情况，就是返回html文件，文件加载完之后调浏览器的打印）。</p><p>下面主要从文件下载讨论：</p><h2 id="使用-a-标签"><a href="#使用-a-标签" class="headerlink" title="使用 a 标签"></a>使用 a 标签</h2><p>最基础的用法，加 download 属性，浏览器下载该文件。<br>缺点：</p><ul><li>不能使用post方法</li><li>不能在启动下载时禁用按钮、下载完毕启用按钮<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/xhr/doc/ts实践总结&amp;ts解析.pptx"</span> <span class="attr">download</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="关于-download-重命名"><a href="#关于-download-重命名" class="headerlink" title="关于 download 重命名"></a>关于 download 重命名</h6><ul><li>download 的值可作为文件的名称</li><li>后端如果对文件命名，那么会使用后端的命名</li><li>在后端没有命名时，以 download 的值为文件名称</li><li>都没命名时，或者 download 值设置为空时，下载的文件用文件本身的名称</li></ul><h2 id="window-open"><a href="#window-open" class="headerlink" title="window.open"></a>window.open</h2><p>缺点：</p><ul><li>异步回调函数里调 window.open 会被浏览器拦截<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载方法</span></span><br><span class="line"><span class="comment"> * @param url</span></span><br><span class="line"><span class="comment"> * @param target</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> windowOpen = <span class="function">(<span class="params">url: <span class="built_in">string</span>, target: <span class="built_in">string</span> = '_blank'</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.open(url, target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="动态创建-a-标签"><a href="#动态创建-a-标签" class="headerlink" title="动态创建 a 标签"></a>动态创建 a 标签</h2><p>如果在某些业务操作之后再下载的情况，就可以动态创建一个 a 标签。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载方法</span></span><br><span class="line"><span class="comment"> * @param url</span></span><br><span class="line"><span class="comment"> * @param target</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> download = <span class="function">(<span class="params">url: <span class="built_in">string</span>, target: <span class="built_in">string</span> = '_blank', fileNmae: <span class="built_in">string</span> = ''</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">    a.id = <span class="string">`download<span class="subst">$&#123;Date.now()&#125;</span>`</span>;</span><br><span class="line">    a.href = url;</span><br><span class="line">    a.target = target;</span><br><span class="line">    a.download = fileNmae;</span><br><span class="line">    <span class="keyword">const</span> body = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>];</span><br><span class="line">    body.appendChild(a);</span><br><span class="line">    a.click();</span><br><span class="line">    body.removeChild(a);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="iframe-form"><a href="#iframe-form" class="headerlink" title="iframe + form"></a>iframe + form</h2><ul><li>不管是 a 标签还是 window.open ，在异步回调里都可能会被浏览器拦截（具体看浏览器，因为不是用户发起的页面跳转，有些浏览器会认为不安全）</li><li>或者是下载请求需要带复杂对象参数，需要用 post 方法，可以使用 iframe + form 利用表单的形式带参数。<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载方法</span></span><br><span class="line"><span class="comment"> * @param url</span></span><br><span class="line"><span class="comment"> * @param target</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> download = <span class="function">(<span class="params">url: <span class="built_in">string</span>, params: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> body = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">const</span> oldIframe = <span class="built_in">document</span>.getElementById(<span class="string">'perfectIframe'</span>);</span><br><span class="line">    <span class="keyword">const</span> oldForm = <span class="built_in">document</span>.getElementById(<span class="string">'perfectForm'</span>);</span><br><span class="line">    <span class="keyword">const</span> oldInput = <span class="built_in">document</span>.getElementById(<span class="string">'perfectInput'</span>);</span><br><span class="line">    <span class="keyword">if</span> (oldIframe &amp;&amp; oldForm &amp;&amp; oldInput) &#123;</span><br><span class="line">        oldForm.setAttribute(<span class="string">'action'</span>, url);</span><br><span class="line">        oldInput.setAttribute(<span class="string">'value'</span>, <span class="built_in">JSON</span>.stringify(params));</span><br><span class="line">        <span class="built_in">document</span>.forms[<span class="string">'perfectForm'</span>].submit();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">        iframe.setAttribute(<span class="string">'name'</span>, <span class="string">'form_target'</span>);</span><br><span class="line">        iframe.setAttribute(<span class="string">'id'</span>, <span class="string">'perfectIframe'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> form = <span class="built_in">document</span>.createElement(<span class="string">'form'</span>);</span><br><span class="line">        form.setAttribute(<span class="string">'id'</span>, <span class="string">'perfectForm'</span>);</span><br><span class="line">        form.setAttribute(<span class="string">'name'</span>, <span class="string">'perfectForm'</span>);</span><br><span class="line">        form.setAttribute(<span class="string">'method'</span>, <span class="string">'post'</span>);</span><br><span class="line">        form.setAttribute(<span class="string">'action'</span>, url);</span><br><span class="line">        form.setAttribute(<span class="string">'target'</span>, <span class="string">'form_target'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> hiddenField = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">        hiddenField.setAttribute(<span class="string">'id'</span>, <span class="string">'perfectInput'</span>);</span><br><span class="line">        hiddenField.setAttribute(<span class="string">'type'</span>, <span class="string">'hidden'</span>);</span><br><span class="line">        hiddenField.setAttribute(<span class="string">'name'</span>, <span class="string">'value'</span>);</span><br><span class="line">        hiddenField.setAttribute(<span class="string">'value'</span>, <span class="built_in">JSON</span>.stringify(params));</span><br><span class="line"></span><br><span class="line">        form.appendChild(hiddenField);</span><br><span class="line">        body.appendChild(form);</span><br><span class="line">        body.appendChild(iframe);</span><br><span class="line">        form.submit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用-fetch-完成下载"><a href="#使用-fetch-完成下载" class="headerlink" title="使用 fetch 完成下载"></a>使用 fetch 完成下载</h2><ul><li>对于 post 请求后端直接返回文件流的情况，可以使用 fetch 下载。</li><li>更多 Fetch 知识请查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">MDN</a><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载方法</span></span><br><span class="line"><span class="comment"> * @param url</span></span><br><span class="line"><span class="comment"> * @param target</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">const</span> downloadByFetch() &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">'/xhr/doc/test.pptx'</span>);</span><br><span class="line">    <span class="keyword">const</span> r = <span class="keyword">await</span> res.blob();</span><br><span class="line">    <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([r], &#123;<span class="keyword">type</span>: <span class="string">"application/octet-stream"</span>&#125;);</span><br><span class="line">    <span class="keyword">const</span> url = <span class="built_in">window</span>.URL.createObjectURL(blob);</span><br><span class="line">    ... <span class="comment">// 动态创建 a 标签完成</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="DEMO源码"><a href="#DEMO源码" class="headerlink" title="DEMO源码"></a>DEMO源码</h3><p>html：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1：点击 下载 来下载文件：<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>a 标签 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/xhr/doc/test.pptx"</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>window.open 下载 <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"windowOpen('/xhr/doc/test.pptx');"</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>动态创建 a 标签 <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"createAEle('/xhr/doc/test.pptx');"</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>异步请求回调里下载 <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"downloadAfterAsync();"</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>ajax回调里下载 <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"downloadAfterAjax();"</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>form 表单提交 <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"formDownload('/xhr/doc/test.pptx',&#123;a:1,b:2&#125;);"</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>使用fetch下载 <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"downloadByFetch();"</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">windowOpen</span>(<span class="params">url</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.open(url,<span class="string">'_blank'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">createAEle</span>(<span class="params">url, target, fileName</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span></span><br><span class="line"><span class="javascript">        a.id = <span class="string">`download<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>`</span>;</span></span><br><span class="line"><span class="undefined">        a.href = url;</span></span><br><span class="line"><span class="javascript">        a.target = target || <span class="string">'_target'</span>;</span></span><br><span class="line"><span class="javascript">        a.download = fileName ? fileName : <span class="literal">undefined</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> body = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="undefined">        body.appendChild(a);</span></span><br><span class="line"><span class="undefined">        a.click();</span></span><br><span class="line"><span class="undefined">        body.removeChild(a);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">downloadAfterAsync</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> http = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">        http.open(<span class="string">'GET'</span>,<span class="string">'/xhr/get/url.json'</span>);</span></span><br><span class="line"><span class="undefined">        http.send();</span></span><br><span class="line"><span class="javascript">        http.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(http.readyState === <span class="number">4</span> &amp;&amp; http.status === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> url = http.responseText;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// createAEle(url); // 有些浏览器，动态创建表单也会拦截</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// windowOpen(url); // 异步回调里调用，浏览器会拦截</span></span></span><br><span class="line"><span class="javascript">                formDownload(url); <span class="comment">// 不拦截</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">downloadAfterAjax</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">            method: <span class="string">'GET'</span>,</span></span><br><span class="line"><span class="javascript">            url: <span class="string">'/xhr/get/url.json'</span>,</span></span><br><span class="line"><span class="javascript">            <span class="keyword">async</span>: <span class="literal">false</span> <span class="comment">// 将异步改为同步，浏览器不拦截</span></span></span><br><span class="line"><span class="javascript">        &#125;).done(<span class="function"><span class="params">url</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="undefined">            windowOpen(url);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">formDownload</span>(<span class="params">url, params</span>) </span>&#123;<span class="comment">// 可以使用post方法，携带大对象参数</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> body = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> oldIframe = <span class="built_in">document</span>.getElementById(<span class="string">'perfectIframe'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> oldForm = <span class="built_in">document</span>.getElementById(<span class="string">'perfectForm'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> oldInput = <span class="built_in">document</span>.getElementById(<span class="string">'perfectInput'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (oldIframe &amp;&amp; oldForm &amp;&amp; oldInput) &#123;</span></span><br><span class="line"><span class="javascript">            oldForm.setAttribute(<span class="string">'action'</span>, url);</span></span><br><span class="line"><span class="javascript">            oldInput.setAttribute(<span class="string">'value'</span>, <span class="built_in">JSON</span>.stringify(params));</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.forms[<span class="string">'perfectForm'</span>].submit();</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span></span><br><span class="line"><span class="javascript">            iframe.setAttribute(<span class="string">'name'</span>, <span class="string">'form_target'</span>);</span></span><br><span class="line"><span class="javascript">            iframe.setAttribute(<span class="string">'id'</span>, <span class="string">'perfectIframe'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> form = <span class="built_in">document</span>.createElement(<span class="string">'form'</span>);</span></span><br><span class="line"><span class="javascript">            form.setAttribute(<span class="string">'id'</span>, <span class="string">'perfectForm'</span>);</span></span><br><span class="line"><span class="javascript">            form.setAttribute(<span class="string">'name'</span>, <span class="string">'perfectForm'</span>);</span></span><br><span class="line"><span class="javascript">            form.setAttribute(<span class="string">'method'</span>, <span class="string">'post'</span>);</span></span><br><span class="line"><span class="javascript">            form.setAttribute(<span class="string">'action'</span>, url);</span></span><br><span class="line"><span class="javascript">            form.setAttribute(<span class="string">'target'</span>, <span class="string">'form_target'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> hiddenField = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span></span><br><span class="line"><span class="javascript">            hiddenField.setAttribute(<span class="string">'id'</span>, <span class="string">'perfectInput'</span>);</span></span><br><span class="line"><span class="javascript">            hiddenField.setAttribute(<span class="string">'type'</span>, <span class="string">'hidden'</span>);</span></span><br><span class="line"><span class="javascript">            hiddenField.setAttribute(<span class="string">'name'</span>, <span class="string">'value'</span>);</span></span><br><span class="line"><span class="javascript">            hiddenField.setAttribute(<span class="string">'value'</span>, <span class="built_in">JSON</span>.stringify(params));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            form.appendChild(hiddenField);</span></span><br><span class="line"><span class="undefined">            body.appendChild(form);</span></span><br><span class="line"><span class="undefined">            body.appendChild(iframe);</span></span><br><span class="line"><span class="undefined">            form.submit();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadByFetch</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">'/xhr/doc/test.pptx'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> r = <span class="keyword">await</span> res.blob();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([r], &#123;<span class="attr">type</span>: <span class="string">"application/octet-stream"</span>&#125;);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> url = <span class="built_in">window</span>.URL.createObjectURL(blob);</span></span><br><span class="line"><span class="javascript">        createAEle(url, <span class="string">'_target'</span>, <span class="string">'a.pptx'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>server：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> fse = <span class="built_in">require</span>(<span class="string">'fse'</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">'koa-static'</span>);</span><br><span class="line"><span class="keyword">const</span> opn = <span class="built_in">require</span>(<span class="string">'opn'</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> returnFile = <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ctx.request.body);<span class="comment">// post 方法提交的参数</span></span><br><span class="line">    <span class="keyword">let</span> filePath = <span class="built_in">decodeURI</span>(ctx.path.replace(<span class="string">'/xhr/'</span>, <span class="string">''</span>));</span><br><span class="line">    <span class="keyword">if</span> (fse.existsSync(path.resolve(filePath))) &#123;</span><br><span class="line">        ctx.set(<span class="string">'Content-disposition'</span>, <span class="string">'attachment; filename=a.pptx'</span>);</span><br><span class="line">        ctx.set(<span class="string">'Content-Type'</span>, <span class="string">'application/vnd.openxmlformats-officedocument.presentationml.presentation; charset=UTF-8'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(path.resolve(filePath))</span><br><span class="line">        ctx.body = fse.readFileSync(path.resolve(filePath));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'error'</span>);</span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置静态资源</span></span><br><span class="line">app.use(<span class="keyword">static</span>(</span><br><span class="line">    path.join(__dirname, <span class="string">'./src'</span>)</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用ctx.body解析中间件</span></span><br><span class="line">app.use(bodyParser())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求</span></span><br><span class="line">router.get(<span class="string">'/xhr/doc/:name'</span>, returnFile)</span><br><span class="line">router.post(<span class="string">'/xhr/doc/:name'</span>, returnFile)</span><br><span class="line"><span class="comment">// 请求</span></span><br><span class="line">router.get(<span class="string">'/xhr/get/:name'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">'/xhr/doc/test.pptx'</span></span><br><span class="line">&#125;)</span><br><span class="line">router.post(<span class="string">'/xhr/get/:name'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">'/xhr/doc/test.pptx'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">opn(<span class="string">'http://localhost:3001/'</span>);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3001</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;文件下载和页面打印在业务中有很多使用场景，它们的本质是一样的，都是向后端发一个请求，然后后端返回一个文件。浏览器将文件下载下来，（打印的情况，就是返回html文件，文件加载完之后调浏览器的打印）。&lt;/p&gt;
&lt;p&gt;下面主要从文件下载讨论：&lt;/p&gt;
&lt;h2 id=&quot;使用-a-标
      
    
    </summary>
    
      <category term="前端" scheme="https://wangcherry.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="typescript" scheme="https://wangcherry.github.io/blog/tags/typescript/"/>
    
  </entry>
  
</feed>
